{"version":3,"sources":["helpers/exportCSV.js","components/ProductSheet.jsx"],"names":["downloadCSV","array","filename","link","document","createElement","rows","forEach","row","join","push","csv","match","setAttribute","encodeURI","click","CustomerSheet","props","columns","name","selector","sortable","width","cell","idx","crates","unit","product","total_qty","total_val","style","textAlign","id","map","crate","total","quantity","crate_id","className","Math","random","toString","exportData","productsCollection","data","Array","from","values","productItem","product_id","category","i","crateId","exportCSV","Date","toLocaleDateString","state","loading","this","customers","search","removeSelectedDairy","filter","item","toLowerCase","includes","actions","label","marginRight","onChange","e","setState","target","value","control","checked","color","onClick","startIcon","variant","Component","connect","setAdmin"],"mappings":"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","file":"static/js/22.3eb4f988.chunk.js","sourcesContent":["function downloadCSV(array, filename = 'export.csv') {\r\n  const link = document.createElement('a');\r\n  let rows = [];\r\n  array.forEach(row => {\r\n    row = row.join(',');\r\n    rows.push(row);\r\n  });\r\n  let csv = rows.join('\\n');\r\n  if (csv == null) return;\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = `data:text/csv;charset=utf-8,${csv}`;\r\n  }\r\n\r\n  link.setAttribute('href', encodeURI(csv));\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nexport default downloadCSV;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport DataTable from \"react-data-table-component\";\r\nimport DownloadIcon from '@material-ui/icons/CloudDownload';\r\nimport Button from '@material-ui/core/Button';\r\nimport exportCSV from '../helpers/exportCSV';\r\nimport Loading from './Loading';\r\nimport { TextField, Switch, FormControlLabel } from '@material-ui/core';\r\n\r\nfunction mapStateToProps(state) {\r\n  let {setAdmin} = state;\r\n  return {\r\n    ...setAdmin\r\n  };\r\n}\r\n\r\nclass CustomerSheet extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true\r\n    }\r\n  }\r\n  columns = [\r\n    {\r\n      name: 'Product Id',\r\n      selector: 'product_id',\r\n      sortable: true,\r\n      width: \"120px\"\r\n    },\r\n    {\r\n      name: 'Product',\r\n      selector: 'product',\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'Crates',\r\n      sortable: false,\r\n      cell: (row, idx) => {\r\n        const {crates, unit, product} = row;\r\n        let total_qty = 0, total_val = 0; \r\n\r\n        return (\r\n          <table style={{width: '100%', textAlign: 'left'}} id=\"customer-sheet-table\">\r\n            <thead>\r\n            <tr>\r\n              <th>Crate</th>\r\n              <th >Total</th>\r\n              <th >Qty</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n              {\r\n                crates.map(crate => {\r\n                  const { total, quantity, crate_id} = crate;\r\n                  total_qty += quantity;\r\n                  total_val += total;\r\n                  return (\r\n                    <tr key={product + Math.random().toString()}>\r\n                      <td className=\"fixed-width-column\">{crate_id}</td>\r\n                      <td className=\"fixed-width-column\">{total} {unit}</td>\r\n                      <td className=\"fixed-width-column\">{quantity}</td>\r\n                    </tr>\r\n                  )\r\n                })\r\n              }\r\n              \r\n              <tr key={product + 'total'}>\r\n                <th className=\"fixed-width-column\">Total</th>\r\n                <th className=\"fixed-width-column\">{total_val} {unit}</th>\r\n                <th className=\"fixed-width-column\">{total_qty}</th>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        );\r\n      }\r\n    }\r\n  ]\r\n  exportData = () => {\r\n    let { productsCollection} = this.props;\r\n    \r\n    let data = Array.from(productsCollection.values());\r\n\r\n    let rows = [\r\n      ['Product Id', 'Product', 'Category', 'Crate', 'Total', 'Qty'],\r\n    ];\r\n    data.forEach(productItem => {\r\n      const {crates, unit, product, product_id, category} = productItem;\r\n      let total_qty = 0, total_val = 0;\r\n      crates.forEach((crate, i) => {\r\n        const {crateId, total, quantity} = crate;\r\n        \r\n        total_qty += quantity;\r\n        total_val += total;\r\n        let row = ['', '', `\"${category}\"`, crateId, `${total} ${unit}`, quantity];\r\n        if(i === 0) {\r\n          row = [product_id, `\"${product}\"`, `\"${category}\"`, crateId, `${total} ${unit}`, quantity];\r\n        }\r\n        rows.push(row);\r\n      });\r\n      rows.push(['', 'Total', '', `${total_val} ${unit}`, total_qty])\r\n    });\r\n    exportCSV(rows, `Product Sheet - ${new Date().toLocaleDateString()}.csv`);\r\n  }\r\n  render() {\r\n    let loading = true;\r\n\r\n    let {customers, productsCollection} = this.props;\r\n    let {search, removeSelectedDairy} = this.state;\r\n    \r\n    let data = [];\r\n    if(customers) {\r\n      loading = false;\r\n      data = Array.from(productsCollection.values());\r\n      data = data.filter(item => {\r\n        const {product} = item;\r\n        if(search) {\r\n          if(product.toLowerCase().includes(search.toLowerCase())) return true;\r\n          return false;\r\n        }\r\n        if(removeSelectedDairy) {\r\n          if(product.toLowerCase().includes(\"Milk\".toLowerCase())) return false;\r\n          if(product.toLowerCase().includes(\"Paneer\".toLowerCase())) return false;\r\n          return true;\r\n        }\r\n        return true;\r\n      })\r\n    }\r\n\r\n    return (\r\n      <div>\r\n          {\r\n            loading?\r\n            <Loading /> :\r\n            <div>\r\n              {/* <div className=\"p-10\">\r\n                \r\n              </div> */}\r\n              <DataTable\r\n                data={data}\r\n                columns={this.columns}\r\n                actions={\r\n                  <div className=\"flex middle\">\r\n                    <TextField \r\n                      label=\"Search Product\"\r\n                      style={{\r\n                        marginRight: 10\r\n                      }}\r\n                      onChange={(e) => {\r\n                        this.setState({\r\n                          search: e.target.value\r\n                        });\r\n                      }}\r\n                    />\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Switch\r\n                          checked={removeSelectedDairy}\r\n                          onChange={(e, removeSelectedDairy) => this.setState({ removeSelectedDairy })}\r\n                          color=\"primary\"\r\n                        />\r\n                      }\r\n                      label=\"Remove Milk and Paneer\"\r\n                    />\r\n                    \r\n                    <Button \r\n                      onClick={this.exportData}\r\n                      startIcon={<DownloadIcon />}\r\n                      color=\"secondary\"\r\n                      variant=\"outlined\"\r\n                    >\r\n                      Download Excel\r\n                    </Button>\r\n\r\n                  </div>\r\n                }\r\n                // onSelectedRowsChange={this.updateState}\r\n                // selectableRows\r\n              />\r\n            </div>\r\n          }\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps\r\n)(CustomerSheet);"],"sourceRoot":""}