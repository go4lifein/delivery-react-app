{"version":3,"sources":["components/DriverOrderTable.js","components/ChooseOrder.js"],"names":["React","memo","withRouter","props","data","history","id","map","item","address","area","phone","orderId","region","name","subarea","delivery_instruction","region_id","customerID","driverId","location_id","orderDate","Card","style","margin","CardHeader","onClick","deliveryId","alert","push","title","className","marginLeft","Divider","CardContent","backgroundColor","Typography","variant","color","paddingTop","paddingBottom","href","fontWeight","toString","ChooseOrder","state","selectedArea","selectedSubarea","selectedHub","showDelivered","this","onUpdateOrdersData","driver","getMyOrders","then","res","orders","filter","length","includes","indexOf","toLowerCase","loading","locations","hubs","areas","subareas","forEach","hub","hubName","areaName","concat","sort","a","b","localeCompare","filterData","Loading","padding","Grid","container","spacing","xs","TextField","fullWidth","value","label","onChange","e","setState","target","FormControl","InputLabel","Select","labelId","MenuItem","FormControlLabel","control","Switch","checked","Button","selectedDriver","showWithoutDairy","Component","connect","setDriver","dispatch","updateOrders"],"mappings":"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","file":"static/js/43.64702254.chunk.js","sourcesContent":["import React from 'react';\r\nimport { withRouter } from \"react-router\";\r\n// import DataTable from \"react-data-table-component\";\r\nimport PhoneIcon from '@material-ui/icons/Phone';\r\nimport Card from '@material-ui/core/Card';\r\n// import Link from 'react-router-dom';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nfunction DriverOrderTable(props) {\r\n  \r\n  const {data, history} = props;\r\n\r\n  return (\r\n    <div id=\"order cards\">\r\n      {data.map(item => {\r\n        const {\r\n          address,\r\n          area,\r\n          phone,\r\n          orderId,\r\n          region,\r\n          name,\r\n          subarea,\r\n          region_id,\r\n          customerID,\r\n          driverId,\r\n          location_id,\r\n          orderDate,\r\n          delivery_instruction,\r\n        } = item;\r\n\r\n        return (\r\n          <Card\r\n            key={orderId.toString()}\r\n            style={{\r\n              margin: 10\r\n            }}\r\n          >\r\n            <CardHeader\r\n              onClick={() => {\r\n                if(item.deliveryId) {\r\n                  alert('Already delivered');\r\n                  return;\r\n                }\r\n                history.push(`/${orderId}/deliver`)\r\n              }}\r\n              title={ \r\n                <div>\r\n                  <div className=\"flex middle\">\r\n                    {/* <Avatar style={{background: 'red'}}>\r\n                      {\"10\"}\r\n                    </Avatar> */}\r\n                    <div style={{marginLeft: 10}}>\r\n                      {name}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              }\r\n            />\r\n            {\r\n              delivery_instruction && <>\r\n                <Divider />\r\n                <CardContent style={{backgroundColor: 'blue'}}>\r\n                  <Typography variant=\"body1\" style={{color:\"#fff\"}}>Delivery Instructions</Typography>\r\n                  <Typography variant=\"h5\" style={{color:\"#fff\"}}>{delivery_instruction}</Typography>\r\n                </CardContent>\r\n              </>\r\n            }\r\n            <Divider />\r\n            <CardContent>\r\n              <div style={{paddingTop: 10, paddingBottom: 10}}>\r\n                <a href={`tel:+91${phone}`} className=\"flex middle\">\r\n                  <PhoneIcon /> {phone}\r\n                </a>\r\n              </div>\r\n              <div>\r\n                <span style={{fontWeight: 'bold'}}>\r\n                  Address\r\n                </span> {address}, {subarea}, {area}, {region}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default React.memo(withRouter(DriverOrderTable));","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport { Button, TextField, Grid } from '@material-ui/core';\r\n\r\nimport Loading from '../components/Loading';\r\nimport {getMyOrders} from '../api/v2/driver';\r\nimport {updateOrders} from '../actions/driver.actions';\r\nimport DriverOrderTable from './DriverOrderTable';\r\n\r\nfunction mapStateToProps(state) {\r\n  let {setDriver} = state;\r\n  return {\r\n    ...setDriver\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onUpdateOrdersData: (data) => dispatch(updateOrders(data))\r\n  };\r\n}\r\n\r\nclass ChooseOrder extends Component {\r\n  state = {\r\n    phone: \"\",\r\n    selectedArea: [],\r\n    selectedSubarea: [],\r\n    selectedHub: \"\",\r\n    showDelivered: false\r\n  }\r\n  componentDidMount() {\r\n    let {onUpdateOrdersData, driver} = this.props;\r\n    getMyOrders(driver.id)\r\n    .then(res => {\r\n      onUpdateOrdersData(res.data);\r\n    })\r\n  }  \r\n  filterData() {\r\n    let {selectedSubarea, selectedArea, selectedHub, phone } = this.state;\r\n    let { orders } = this.props;\r\n    \r\n    let data = [];\r\n    \r\n    if(orders) {\r\n      data = orders.filter((item) => {\r\n        if(selectedHub) {\r\n          // console.log(selectedHub, item.region)\r\n          if(item.region !== selectedHub) return false;\r\n        }\r\n        if(selectedArea.length) {\r\n          if(!selectedArea.includes(item.area)) return false;\r\n        }\r\n        if(selectedSubarea.length) {\r\n          if(!selectedSubarea.includes(item.subarea)) return false;\r\n        }\r\n        if(phone) {\r\n          if(item.phone.indexOf(phone) !== -1) return true;\r\n          if(item.name.toLowerCase().indexOf(phone.toLowerCase()) !== -1) return true;\r\n          if(item.orderId.toString().indexOf(phone.toLowerCase()) !== -1) return true;\r\n          return false;\r\n        }\r\n        return true;\r\n      })\r\n    }\r\n    return data;\r\n  }\r\n  render() {\r\n    let loading = true, data = [];\r\n    let {selectedArea, selectedHub, selectedSubarea, phone, showDelivered } = this.state;\r\n    let {orders, locations, hubs} = this.props;\r\n    \r\n    let areas = [], subareas = [];\r\n    \r\n    if(locations) locations.forEach((hub, hubName) => {\r\n      hub.forEach((area, areaName) => {\r\n        if( selectedHub === hubName ) {\r\n          areas.push(areaName);\r\n        }\r\n        if( selectedArea.includes(areaName) || selectedArea.length === 0) {\r\n          subareas = subareas.concat(area);\r\n        }\r\n      });\r\n    });\r\n\r\n    areas = areas.sort((a, b) => a.localeCompare(b));\r\n    subareas = subareas.sort((a, b) => a.localeCompare(b));\r\n\r\n    if(orders) {\r\n      loading = false;\r\n      data = this.filterData();\r\n      data = data.filter((item) => {\r\n        if(showDelivered) {\r\n          if(item.deliveryId) return true;\r\n          return false;\r\n        } else {\r\n          if(item.deliveryId) return false;\r\n          return true;\r\n        }\r\n      })\r\n    }\r\n\r\n    data = data.sort((a, b) => a.location_id - b.location_id);\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          loading ? \r\n          <Loading /> :\r\n          <div>\r\n            <div\r\n              className=\"flex middle\"\r\n              style={{padding: 10}}\r\n            >\r\n\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={6}>\r\n                  <TextField\r\n                    fullWidth\r\n                    value={phone}\r\n                    label=\"Phone or Name\"\r\n                    onChange={(e) => this.setState({phone: e.target.value})}\r\n                  />\r\n                </Grid>\r\n\r\n              <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel id=\"hub-filter\">Hub</InputLabel>\r\n                  <Select\r\n                    fullWidth\r\n                    labelId=\"hub-filter\"\r\n                    value={selectedHub}\r\n                    onChange={(e) => {\r\n                      let selectedHub = e.target.value;\r\n                      this.setState({selectedHub, selectedArea: [], selectedSubarea: []})\r\n                    }}\r\n                  >\r\n                    {/* <MenuItem value=\"all\">All</MenuItem> */}\r\n                    {hubs.map(item => (\r\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n              \r\n            </div>\r\n\r\n            <div\r\n              className=\"flex middle\"\r\n              style={{padding: 10}}\r\n            >\r\n              \r\n              <Grid container spacing={2}>\r\n                <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel id=\"area-filter\">Area</InputLabel>\r\n                  <Select\r\n                    labelId=\"area-filter\"\r\n                    fullWidth\r\n                    value={selectedArea}\r\n                    onChange={(e) => {\r\n                      let selectedArea = e.target.value;\r\n                      this.setState({selectedArea, selectedSubarea: []})\r\n                    }}\r\n                  >\r\n                    {/* <MenuItem value=\"all\">All</MenuItem> */}\r\n                    {areas.map(item => (\r\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n\r\n              <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel id=\"subarea-filter\">Subareas</InputLabel>\r\n                  <Select\r\n                    labelId=\"subarea-filter\"\r\n                    fullWidth\r\n                    value={selectedSubarea}\r\n                    onChange={(e, b) => {\r\n                      let selectedSubarea = e.target.value;\r\n                      this.setState({selectedSubarea});\r\n                    }}\r\n                  >\r\n                    {/* <MenuItem value=\"all\">All</MenuItem> */}\r\n                    {subareas.map(item => (\r\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                  </FormControl>\r\n              </Grid>\r\n              \r\n            </Grid>\r\n            </div>\r\n            <div\r\n              className=\"flex space-bw\"\r\n              style={{padding: 10}}\r\n            >\r\n              <div>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch\r\n                      checked={showDelivered}\r\n                      onChange={(e, showDelivered) => this.setState({showDelivered})}\r\n                      color=\"primary\"\r\n                    />\r\n                  }\r\n                  label=\"Delivered\"\r\n                />\r\n              </div>\r\n              <div >\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      phone: \"\",\r\n                      selectedArea: 'all',\r\n                      selectedSubarea: 'all',\r\n                      selectedHub: 'all',\r\n                      selectedDriver: 'all',\r\n                      showWithoutDairy: false\r\n                    })\r\n                  }}\r\n                >\r\n                  Clear All Filters\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            \r\n            <DriverOrderTable \r\n              data={data}\r\n            />\r\n          </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ChooseOrder);"],"sourceRoot":""}