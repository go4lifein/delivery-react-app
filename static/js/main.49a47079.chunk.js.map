{"version":3,"sources":["constants/index.js","helpers/utils.js","components/Loading.js","App.js","reducers/admin.reducers.js","reducers/driver.reducers.js","index.js"],"names":["UPDATE_DRIVER","UPDATE_ORDERS","UPDATE_ADMIN","UPDATE_ORDERS_DATA","UPDATE_ADMIN_DATA","UPDATE_ORDER_CRATE_DATA","API_URL","getCookies","cookies","document","cookie","split","data","forEach","values","request","config","axios","hasOnlyDairyProducts","products","Object","entries","length","hasNoDairy","accessToken","userAccessToken","defaults","headers","common","initRequestAuthHeader","Loading","className","Admin","lazy","Driver","Trace","App","theme","createMuiTheme","palette","secondary","light","main","dark","contrastText","background","default","paper","id","ThemeProvider","CssBaseline","base","fallback","path","exact","component","admin","window","localStorage","getItem","initialState","JSON","parse","undefined","loadingOrderData","updateOrderCrateData","state","action","customers","payload","customer","order_id","console","log","driver","store","createStore","combineReducers","setDriver","type","setItem","stringify","orders","Map","locations","order","subarea","area","hub","has","hubAreas","get","subareas","includes","push","set","areaData","categories","hubs","areas","crate_id","customer_id","customer_name","phone_number","address_id","house_number","category","product","quantity","package_size","package_type","product_package_id","product_id","region_id","location_id","delivery_person_id","productData","total","unit","deliveryData","driver_id","deliver_date","delivery_type","proof_img","complete_delivery","order_cancel_reason","boxes","milk_packets","delivery","delivered","name","phone","address","onlyDairy","setAdmin","productsCollection","alreadyCreatedCratedToday","order_staus","order_type","TIMESTAMP","last_update_on","crates","remark","small_boxes","large_boxes","fnvProducts","crateId","crateData","productValue","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.49a47079.chunk.js","sourcesContent":["// constants for driver\r\nexport const UPDATE_DRIVER = 'UPDATE_DRIVER';\r\nexport const UPDATE_ORDERS = 'UPDATE_ORDERS';\r\n\r\n// admin constants\r\nexport const UPDATE_ADMIN = 'UPDATE_ADMIN';\r\nexport const UPDATE_ORDERS_DATA = 'UPDATE_ORDERS_DATA';\r\nexport const UPDATE_ADMIN_DATA = 'UPDATE_ADMIN_DATA';\r\nexport const UPDATE_ORDER_CRATE_DATA = 'UPDATE_ORDER_CRATE_DATA';\r\n","import axios from \"axios\";\r\n\r\nexport const API_URL = 'https://api.deliver.go4life.in/api';\r\n// export const API_URL = 'https://go4life-deliver.herokuapp.com/api';\r\n// export const API_URL = 'http://localhost:5000/api';\r\n// export const API_URL = 'http://192.168.40.14:5000/api';\r\n// export const API_URL = 'http://192.168.0.103:5000/api';\r\n\r\n// export const API_URL = '/api';\r\n\r\nexport function getCookies() {\r\n  var x = document.cookie;\r\n  let cookies = x.split(\";\");\r\n  let data = {};\r\n  cookies.forEach((cookie) => {\r\n    let values = cookie.split(\"=\");\r\n    data[values[0]] = values[1];\r\n  });\r\n  return data;\r\n}\r\n\r\nfunction setRequestAuthHeader(accessToken) {\r\n  axios.defaults.headers.common[\"x-auth-token\"] = accessToken;\r\n}\r\n\r\nexport const userAccessToken = getCookies()[\"x-auth-token\"];\r\n\r\nexport function initRequestAuthHeader() {\r\n  let userAccessToken = getCookies()[\"x-auth-token\"];\r\n  if (userAccessToken) setRequestAuthHeader(userAccessToken);\r\n}\r\ninitRequestAuthHeader();\r\n\r\nexport function request(config) {\r\n  return axios.request(config);\r\n}\r\n\r\nexport function onlyMilkAndPaneer(products) {\r\n  const categories = Object.entries(products);\r\n  categories.forEach(([category, value]) => {\r\n    value.forEach(product => {\r\n      const name = product.product;\r\n      if(name.toLowerCase().includes(\"milk\") === false) return false;\r\n      if(name.toLowerCase().includes(\"paneer\") ===false) return false;\r\n    });\r\n  });\r\n  return true;\r\n}\r\n\r\n\r\nexport function hasOnlyDairyProducts(products) {\r\n  if('Dairy' in products && Object.entries(products).length === 1) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function hasNoDairy(products) {\r\n  if(!('Dairy' in products)) {\r\n    return true;\r\n  }\r\n  return false;\r\n}","import { CircularProgress } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <div className=\"flex center middle p-10\">\r\n      <CircularProgress />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;","import React, { Suspense, lazy } from \"react\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\n// import useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\nimport { CssBaseline } from \"@material-ui/core\";\r\nimport \"./css/style.css\";\r\n\r\nimport Loading from \"./components/Loading\";\r\nconst Admin = lazy(() => import(\"./containers/Admin.jsx\"));\r\nconst Driver = lazy(() => import(\"./containers/Driver.jsx\"));\r\nconst Trace = lazy(() => import(\"./trace/Trace.js\"));\r\n// const Trace = lazy(() => import(\"./components/Traceability.js\"));\r\n\r\nfunction App() {\r\n  // const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\r\n\r\n  const theme = createMuiTheme({\r\n    palette: {\r\n      // type: 'light',\r\n      // primary: colors.green[400],\r\n      secondary: {\r\n        light: \"#ff4081\",\r\n        main: \"#f50057\",\r\n        dark: \"#c51162\",\r\n        contrastText: \"#fff\",\r\n      },\r\n      background: {\r\n        default: \"#fff\",\r\n        paper: \"#fff\",\r\n      },\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div id=\"app\">\r\n      <ThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n        <Router base={\"delivery-react-app\"}>\r\n          <main>\r\n            <Suspense fallback={<Loading />}>\r\n              <Switch>\r\n                <Route path=\"/trace\" exact component={Trace} />\r\n                <Route path=\"/admin\" component={Admin} />\r\n                <Route path=\"/\" component={Driver} />\r\n              </Switch>\r\n            </Suspense>\r\n          </main>\r\n        </Router>\r\n      </ThemeProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import {UPDATE_ADMIN, UPDATE_ORDERS_DATA, UPDATE_ADMIN_DATA, UPDATE_ORDER_CRATE_DATA} from '../constants/index';\r\n\r\nimport {hasOnlyDairyProducts, hasNoDairy} from '../helpers/utils';\r\n\r\nlet admin = window.localStorage.getItem('admin');\r\nif(admin) {\r\n  admin = JSON.parse(admin);\r\n} else {\r\n  admin = undefined;\r\n}\r\n// console.log(admin);\r\nconst initialState = {\r\n  admin,\r\n  loadingOrderData: true\r\n}\r\n\r\nfunction updateOrderCrateData(state, action) {\r\n  const {customers} = state;\r\n  let {payload} = action;\r\n  const {id} = payload;\r\n  if(customers) {\r\n    for(const customer of customers) {\r\n      let data = customer[1];\r\n      if(data.order_id === id) {\r\n        data = {\r\n          ...data,\r\n          ...payload\r\n        }\r\n        customer[1] = data;\r\n        console.log(customer[1]);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return state;\r\n}\r\n\r\nexport const setAdmin = (state = initialState, action = {}) => {\r\n  switch(action.type) {\r\n    case UPDATE_ADMIN:\r\n      let admin = action.payload;\r\n      window.localStorage.setItem('admin', JSON.stringify(admin));\r\n      return { ...state, admin}\r\n\r\n    case UPDATE_ADMIN_DATA:\r\n      // let {customers, areas, subareas, categories, hubs, orders} = action.payload;\r\n      return { \r\n        ...state,\r\n        ...action.payload\r\n      }\r\n\r\n    case UPDATE_ORDER_CRATE_DATA:\r\n      // let {customers, areas, subareas, categories, hubs, orders} = action.payload;\r\n      return updateOrderCrateData(state, action);\r\n\r\n    case UPDATE_ORDERS_DATA:\r\n\r\n      let orders = action.payload;\r\n      let customers = new Map();\r\n      let productsCollection = new Map();\r\n      let locations = new Map();\r\n      let alreadyCreatedCratedToday = false;\r\n      /* \r\n      locations = {\r\n        \"Gurgaon\": {\r\n          \"Sector 69\": [\r\n            \"Tulip White\"\r\n          ]\r\n        },\r\n        \"South Delhi\": {\r\n\r\n        }\r\n      }\r\n      */\r\n\r\n      // prepare location data\r\n      orders.forEach(order => {\r\n        let { subarea, area, hub, crate_id } = order;\r\n        \r\n        if(crate_id) {\r\n          alreadyCreatedCratedToday = true;\r\n        }\r\n        if(locations.has(hub)) {\r\n          let hubAreas = locations.get(hub);\r\n          if(hubAreas.has(area)) {\r\n            let subareas = hubAreas.get(area);\r\n            if(!subareas.includes(subarea)) {\r\n              subareas.push(subarea);\r\n            }\r\n            hubAreas.set(area, subareas);\r\n            locations.set(hub, hubAreas);\r\n          } else {\r\n            let areaData = [subarea];\r\n            hubAreas.set(area, areaData);\r\n            locations.set(hub, hubAreas);\r\n          }\r\n        } else {\r\n          let hubAreas = new Map();\r\n          hubAreas.set(area, [subarea]);\r\n          locations.set(hub, hubAreas)\r\n        }\r\n      });\r\n\r\n      // console.log(locations);\r\n\r\n      let categories = [];\r\n      let hubs = [];\r\n      let areas = [];\r\n      let subareas = [];\r\n      let products = {};\r\n\r\n      // accumulate customer data\r\n      orders.forEach(order => {\r\n        let { \r\n          order_id, crate_id,\r\n          order_staus, order_type, TIMESTAMP, last_update_on,\r\n          crates, remark, small_boxes, large_boxes,\r\n          customer_id, customer_name, phone_number, \r\n          address_id, house_number, subarea, area, hub,\r\n          category, product, quantity,\r\n          package_size, package_type, product_package_id, product_id, \r\n          region_id, location_id, delivery_person_id,\r\n          driver_id, deliver_date, delivery_type, proof_img, complete_delivery, order_cancel_reason, boxes, milk_packets\r\n        } = order;\r\n\r\n        // if(order_id === 129779) {\r\n        //   console.log(order);\r\n        // }\r\n\r\n        // filter orders created after crate id is generated\r\n        if(alreadyCreatedCratedToday) {\r\n          if(!crate_id) {\r\n            return;\r\n          }\r\n        }\r\n\r\n        let productData = {\r\n          product,\r\n          product_id,\r\n          product_package_id,\r\n          package_size,\r\n          quantity,\r\n          category,\r\n          total: package_size * quantity,\r\n          unit: package_type\r\n        }\r\n        \r\n        let deliveryData = {\r\n          driver_id, deliver_date, delivery_type, proof_img, complete_delivery, order_cancel_reason, boxes, milk_packets\r\n        }\r\n        \r\n        if(categories.includes(category) === false) {\r\n          categories.push(category);\r\n        }\r\n        if(!(product_id in products)) {\r\n          products[product_id] = product;\r\n        }\r\n\r\n        if(customers.has(customer_id)) {\r\n          \r\n          let customer = customers.get(customer_id);\r\n          let {products} = customer;\r\n          \r\n          if(category in products) {\r\n            products[category].push(productData);\r\n          } else {\r\n            products[category] = [\r\n              productData\r\n            ]\r\n          }\r\n          \r\n          customer.products = products;\r\n          customer.delivery = deliveryData;\r\n          customer.delivered = deliveryData.deliver_date;\r\n        } else {\r\n          \r\n          // if(order_id === 129779) {\r\n          //   console.log(order);\r\n          // }\r\n          \r\n          if(areas.includes(area) === false) {\r\n            areas.push(area);\r\n          }\r\n          if(subareas.includes(subarea) === false) {\r\n            subareas.push(subarea);\r\n          }\r\n          if(hubs.includes(hub) === false) {\r\n            hubs.push(hub);\r\n          }\r\n\r\n          let customer = {\r\n            name: customer_name,\r\n            phone: phone_number,\r\n            order_id,\r\n            crate_id,\r\n            order_staus, order_type, TIMESTAMP,  last_update_on,\r\n            crates, remark, small_boxes, large_boxes, delivery_person_id,\r\n            address: {\r\n              address_id,\r\n              house_number, subarea,\r\n              area, hub,\r\n              region_id, location_id\r\n            },\r\n            products: {\r\n              [category]: [productData]\r\n            },\r\n            fnvProducts: [],\r\n            delivery: deliveryData,\r\n            delivered: deliveryData.deliver_date\r\n          }\r\n          customers.set(customer_id, customer);\r\n        }\r\n      });\r\n\r\n      // create crate id for orders except onlyDairyProducts\r\n      let crateId = 1;\r\n      for(const customer of customers) {\r\n        const {products} = customer[1];\r\n        if(hasOnlyDairyProducts(products)) {\r\n          customer[1].onlyDairy = true;\r\n        } else {\r\n          customer[1].onlyDairy = false;\r\n          customer[1].crateId = crateId;\r\n          crateId++;\r\n        }\r\n        \r\n        if(hasNoDairy(products)) {\r\n          customer[1].hasNoDairy = true;\r\n        } else {\r\n          customer[1].hasNoDairy = false;\r\n        }  \r\n      }\r\n      \r\n      // create crate id for orders that has onlyDairyProducts\r\n      for(const customer of customers) {\r\n        const {products} = customer[1];\r\n        if(hasOnlyDairyProducts(products)) {\r\n          customer[1].crateId = crateId;\r\n          crateId++;\r\n        }\r\n      }\r\n\r\n      // create productsCollection\r\n      orders.forEach(order => {\r\n        let { \r\n          customer_id, \r\n          category, product, quantity,\r\n          package_size, package_type, product_id,\r\n          crate_id\r\n        } = order;\r\n\r\n        if(alreadyCreatedCratedToday && !crate_id) {\r\n          return;\r\n        }\r\n\r\n          \r\n        let crateData = {\r\n          quantity,\r\n          total: package_size * quantity,\r\n          crateId: customers.get(customer_id).crateId,\r\n          crate_id: customers.get(customer_id).crate_id\r\n        }\r\n        if(productsCollection.has(product_id)) {\r\n          let productValue = productsCollection.get(product_id);\r\n          let {crates} = productValue;\r\n          crates.push(crateData);\r\n\r\n          productValue.crates = crates;\r\n        } else {\r\n          let productData = {\r\n            package_size,\r\n            product_id,\r\n            product,\r\n            category,\r\n            unit: package_type,\r\n            crates: [crateData]\r\n          }\r\n          productsCollection.set(product_id, productData);\r\n        }\r\n      })\r\n      \r\n      return {\r\n        ...state, \r\n        alreadyCreatedCratedToday, \r\n        loadingOrderData: false, \r\n        customers, \r\n        locations, \r\n        productsCollection, \r\n        products, \r\n        areas, \r\n        subareas, \r\n        categories, \r\n        hubs, \r\n        orders\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}","import {UPDATE_DRIVER, UPDATE_ORDERS} from '../constants/index';\r\n\r\nlet driver = window.localStorage.getItem('driver');\r\nif(driver) {\r\n  driver = JSON.parse(driver);\r\n} else {\r\n  driver = undefined;\r\n}\r\nconst initialState = {\r\n  driver\r\n}\r\n\r\nfunction hasOnlyDairyProducts(products) {\r\n  if('Dairy' in products && Object.entries(products).length === 1) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction hasNoDairy(products) {\r\n  if(!('Dairy' in products)) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport const setDriver = (state = initialState, action = {}) => {\r\n  switch(action.type) {\r\n    case UPDATE_DRIVER:\r\n      let driver = action.payload;\r\n      window.localStorage.setItem('driver', JSON.stringify(driver));\r\n      return { ...state, driver}\r\n\r\n    case UPDATE_ORDERS:\r\n\r\n      let orders = action.payload;\r\n      let customers = new Map();\r\n      // let productsCollection = new Map();\r\n      let locations = new Map();\r\n      /* \r\n      locations = {\r\n        \"Gurgaon\": {\r\n          \"Sector 69\": [\r\n            \"Tulip White\"\r\n          ]\r\n        },\r\n        \"South Delhi\": {\r\n\r\n        }\r\n      }\r\n      */\r\n      orders.forEach(order => {\r\n        let { subarea, area, hub } = order;\r\n        if(locations.has(hub)) {\r\n          let hubAreas = locations.get(hub);\r\n          if(hubAreas.has(area)) {\r\n            let subareas = hubAreas.get(area);\r\n            if(!subareas.includes(subarea)) {\r\n              subareas.push(subarea);\r\n            }\r\n            hubAreas.set(area, subareas);\r\n            locations.set(hub, hubAreas);\r\n          } else {\r\n            let areaData = [subarea];\r\n            hubAreas.set(area, areaData);\r\n            locations.set(hub, hubAreas);\r\n          }\r\n        } else {\r\n          let hubAreas = new Map();\r\n          hubAreas.set(area, [subarea]);\r\n          locations.set(hub, hubAreas)\r\n        }\r\n      });\r\n\r\n      // console.log(locations);\r\n\r\n      let categories = [];\r\n      let hubs = [];\r\n      let areas = [];\r\n      let subareas = [];\r\n      let products = {};\r\n\r\n      orders.forEach(order => {\r\n        let { \r\n          order_id, crate_id,\r\n          customer_id, customer_name, phone_number, \r\n          address_id, house_number, subarea, area, hub,\r\n          category, product, quantity,\r\n          package_size, package_type, product_package_id, product_id, \r\n          region_id, location_id, delivery_person_id,\r\n          driver_id, deliver_date, delivery_type, proof_img, complete_delivery, order_cancel_reason, boxes, milk_packets\r\n        } = order;\r\n\r\n        if(delivery_person_id) {\r\n          // console.log(order);\r\n        }\r\n        let productData = {\r\n          product,\r\n          product_id,\r\n          product_package_id,\r\n          package_size,\r\n          quantity,\r\n          total: package_size * quantity,\r\n          unit: package_type\r\n        }\r\n        let deliveryData = {\r\n          driver_id, deliver_date, delivery_type, proof_img, complete_delivery, order_cancel_reason, boxes, milk_packets\r\n        }\r\n        \r\n        if(categories.includes(category) === false) {\r\n          categories.push(category);\r\n        }\r\n        if(!(product_id in products)) {\r\n          products[product_id] = product;\r\n        }\r\n\r\n        if(customers.has(customer_id)) {\r\n          let customer = customers.get(customer_id);\r\n          let {products} = customer;\r\n          \r\n          if(category in products) {\r\n            products[category].push(productData);\r\n          } else {\r\n            products[category] = [\r\n              productData\r\n            ]\r\n          }\r\n\r\n          customer.products = products;\r\n          customer.delivery = deliveryData;\r\n          customer.delivered = deliveryData.deliver_date;\r\n        } else {\r\n          \r\n          if(areas.includes(area) === false) {\r\n            areas.push(area);\r\n          }\r\n          if(subareas.includes(subarea) === false) {\r\n            subareas.push(subarea);\r\n          }\r\n          if(hubs.includes(hub) === false) {\r\n            hubs.push(hub);\r\n          }\r\n\r\n          let customer = {\r\n            name: customer_name,\r\n            phone: phone_number,\r\n            order_id,\r\n            crate_id,\r\n            address: {\r\n              address_id,\r\n              house_number, subarea,\r\n              area, hub,\r\n              region_id, location_id\r\n            },\r\n            products: {\r\n              [category]: [productData]\r\n            },\r\n            delivery_person_id,\r\n            delivery: deliveryData,\r\n            delivered: deliveryData.deliver_date\r\n          }\r\n          customers.set(customer_id, customer);\r\n        }\r\n      });\r\n\r\n      for(const customer of customers) {\r\n        const {products} = customer[1];\r\n        if(hasOnlyDairyProducts(products)) {\r\n          customer[1].onlyDairy = true;\r\n        } else {\r\n          customer[1].onlyDairy = false;\r\n        }\r\n        \r\n        if(hasNoDairy(products)) {\r\n          customer[1].hasNoDairy = true;\r\n        } else {\r\n          customer[1].onlyDairy = false;\r\n        }\r\n      }\r\n      \r\n      return {...state, customers, locations,  areas, subareas, hubs, orders};\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n//import reportWebVitals from './reportWebVitals';\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, combineReducers } from \"redux\";\r\n\r\nimport { setAdmin } from \"./reducers/admin.reducers\";\r\nimport { setDriver } from \"./reducers/driver.reducers\";\r\n\r\nconst store = createStore(\r\n  combineReducers({\r\n    setDriver,\r\n    setAdmin,\r\n  })\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}