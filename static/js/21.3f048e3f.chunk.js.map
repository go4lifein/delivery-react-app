{"version":3,"sources":["helpers/exportCSV.js","components/OrderDataTable.js","components/DeliveryInfo.js","components/OrderManagement.jsx"],"names":["downloadCSV","array","filename","link","document","createElement","rows","forEach","row","join","push","csv","match","setAttribute","encodeURI","click","sortIcon","OrderDataTable","props","data","onRowSelect","onSelectionChange","deliveryBoys","columns","name","selector","sortable","width","cell","order_id","TIMESTAMP","time","Date","valueOf","today","setHours","className","Chip","size","color","label","idx","address","hub","area","subarea","house_number","onlyDairy","hasNoDairy","products","dairyProducts","count","item","product_id","quantity","total","delivery_person_id","driver","get","delivery","driver_id","deliver_date","console","log","striped","noHeader","selectableRows","onSelectedRowsChange","dense","selectableRowsComponent","Checkbox","highlightOnHover","pointerOnHover","onRowClicked","e","pagination","paginationPerPage","React","memo","Transition","forwardRef","ref","Slide","direction","OrderDeliveryForm","Review","customer","delivery_type","proof_img","complete_delivery","boxes","milk_packets","Card","variant","Typography","Divider","toDateString","style","mapDeliveryType","alt","src","mapCompleteDelivery","state","this","Dialog","fullScreen","open","TransitionComponent","AppBar","position","Toolbar","IconButton","edge","onClick","setSelectedCustomer","aria-label","margin","padding","Component","connect","setAdmin","mapStateToProps","OrderManagement","hideAddress","setState","hiddenAddress","exportData","customers","Array","from","values","order_type","crate_id","phone","gable_top","paneer","driverName","deliveredBy","exportCSV","toLocaleDateString","loading","selectedArea","selectedSubarea","selectedHub","selectedDriver","showWithoutDairy","selectedRow","orderType","showDelivered","locations","hubs","deliveryBoysData","sort","a","b","localeCompare","areas","subareas","hubName","areaName","includes","length","concat","filter","indexOf","toLowerCase","toString","String","Loading","marginRight","TextField","value","fullWidth","onChange","target","FormControl","InputLabel","id","Select","labelId","MenuItem","map","Autocomplete","options","multiple","renderInput","params","FormControlLabel","control","Switch","checked","Button","window","location","reload","AssignOrders","dispatch","onUpdateOrdersData","updateOrdersData","useState","selectedRows","setSelectedRows","selectedCustomer","onSelectCustomer","useCallback","changeSelection","allSelected","selectedCount","disabled","order_ids","assignDrivers","then","res","getAllOrders","orders","startIcon","cssInputClass","cssLabelClass","onFileLoaded","fileInfo","alert","onError","val","parserOptions","header","dynamicTyping","skipEmptyLines","transformHeader","replace","DeliveryInfo"],"mappings":"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","file":"static/js/21.3f048e3f.chunk.js","sourcesContent":["function downloadCSV(array, filename = 'export.csv') {\r\n  const link = document.createElement('a');\r\n  let rows = [];\r\n  array.forEach(row => {\r\n    row = row.join(',');\r\n    rows.push(row);\r\n  });\r\n  let csv = rows.join('\\n');\r\n  if (csv == null) return;\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = `data:text/csv;charset=utf-8,${csv}`;\r\n  }\r\n\r\n  link.setAttribute('href', encodeURI(csv));\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nexport default downloadCSV;","import React from 'react';\r\nimport DataTable from \"react-data-table-component\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Chip from '@material-ui/core/Chip';\r\n// import moment from 'moment';\r\n\r\nconst sortIcon = <ArrowDownward />;\r\nfunction OrderDataTable(props) {\r\n  const {data, onRowSelect, onSelectionChange, deliveryBoys} = props;\r\n  const columns = [\r\n    {\r\n      name: 'Crate',\r\n      selector: 'crate_id',\r\n      sortable: true,\r\n      width: '70px'\r\n    },\r\n    {\r\n      name: 'Order Id',\r\n      selector: 'order_id',\r\n      sortable: true,\r\n      width: '130px',\r\n      cell: (row) => {\r\n        const {order_id, TIMESTAMP} = row;\r\n        const time = new Date(TIMESTAMP).valueOf();\r\n        const today = new Date().setHours(8).valueOf();\r\n        if(time > today) {\r\n          return (\r\n            <div className=\"flex middle space-bw w-100\">\r\n              <div>{order_id}</div> {\r\n                time > today &&\r\n                <Chip size=\"small\" color=\"primary\" label=\"New\" />\r\n              }\r\n            </div>\r\n          )\r\n        } else {\r\n          return order_id;\r\n        }\r\n      }\r\n    },\r\n    {\r\n      name: 'Name',\r\n      selector: 'name',\r\n      sortable: true,\r\n      width: '200px'\r\n    },\r\n    {\r\n      name: 'Phone',\r\n      selector: 'phone',\r\n      sortable: true,\r\n      width: '140px'\r\n    },\r\n    {\r\n      name: 'Hub',\r\n      sortable: true,\r\n      selector: 'address.hub',\r\n      width: '100px',\r\n      cell: (row, idx) => {\r\n        let {address} = row;\r\n        return address.hub;\r\n      }\r\n    },\r\n    {\r\n      name: 'Region',\r\n      sortable: true,\r\n      selector: 'address.area',\r\n      width: '140px',\r\n      cell: (row, idx) => {\r\n        let {address} = row;\r\n        return address.area;\r\n      }\r\n    },\r\n    {\r\n      name: 'Locality',\r\n      sortable: true,\r\n      selector: 'address.subarea',\r\n      width: '150px',\r\n      cell: (row, idx) => {\r\n        let {address} = row;\r\n        return address.subarea;\r\n      }\r\n    },\r\n    {\r\n      name: 'House',\r\n      selector: 'address.house',\r\n      width: '200px',\r\n      cell: (row, idx) => {\r\n        let {address} = row;\r\n        return address.house_number;\r\n      }\r\n    },\r\n    {\r\n      name: 'Order Type',\r\n      selector: 'order-type',\r\n      width: '80px',\r\n      cell: (row, idx) => {\r\n        if(row.onlyDairy) return 'Dairy';\r\n        else if(row.hasNoDairy) return 'Grocery';\r\n        else return 'Dairy + Grocery';\r\n      }\r\n    },\r\n    {\r\n      name: 'Gable Top',\r\n      selector: 'gable-top',\r\n      width: '80px',\r\n      cell: (row, idx) => {\r\n        let {products} = row;\r\n        if('Dairy' in products) {\r\n          let dairyProducts = products['Dairy'];\r\n          let count = 0;\r\n          dairyProducts.forEach(item => {\r\n            if(item.product_id === 811) count += item.quantity;\r\n          });\r\n          if(count) return count;\r\n          else return '';\r\n        }\r\n        return '';\r\n      }\r\n    },\r\n    {\r\n      name: 'Milk Packets',\r\n      selector: 'milk-packets',\r\n      width: '80px',\r\n      cell: (row, idx) => {\r\n        let {products} = row;\r\n        if('Dairy' in products) {\r\n          let dairyProducts = products['Dairy'];\r\n          let count = 0;\r\n          dairyProducts.forEach(item => {\r\n            if(item.product_id === 1) count += item.quantity;\r\n          });\r\n          if(count) return count;\r\n          else return '';\r\n        }\r\n        return '';\r\n      }\r\n    },\r\n    {\r\n      name: 'Paneer',\r\n      selector: 'paneer',\r\n      width: '80px',\r\n      cell: (row, idx) => {\r\n        let {products} = row;\r\n        if('Dairy' in products) {\r\n          let dairyProducts = products['Dairy'];\r\n          let count = 0;\r\n          dairyProducts.forEach(item => {\r\n            if(item.product_id === 225) count += item.total;\r\n          });\r\n          if(count) return count + 'g';\r\n          else return '';\r\n        }\r\n        return '';\r\n      }\r\n    },\r\n    {\r\n      name: 'Driver',\r\n      selector: '_driver',\r\n      cell: (row, idx) => {\r\n        let {delivery_person_id} = row;\r\n        if(delivery_person_id) {\r\n          let driver = deliveryBoys.get(delivery_person_id);\r\n          return driver ? driver.name : '';\r\n        }\r\n        return '';\r\n      }\r\n    },\r\n    {\r\n      name: 'Delivered by',\r\n      selector: 'delivery',\r\n      cell: (row, idx) => {\r\n        let {delivery} = row;\r\n        const {driver_id, deliver_date} = delivery;\r\n        if(driver_id && deliver_date) {\r\n          let driver = deliveryBoys.get(driver_id);\r\n          return driver ? driver.name : 'Not Delivered yet';\r\n        }\r\n        return '';\r\n      }\r\n    }\r\n  ];\r\n\r\n  console.log(\"Rerendering Table\");\r\n\r\n  return (\r\n    <div>\r\n      <DataTable\r\n        striped={true}\r\n        noHeader\r\n        selectableRows\r\n        onSelectedRowsChange={onSelectionChange}\r\n        dense={true}\r\n        selectableRowsComponent={Checkbox}\r\n        sortIcon={sortIcon}\r\n        data={data}\r\n        columns={columns}\r\n        highlightOnHover={true}\r\n        pointerOnHover={true}\r\n        onRowClicked={(row, e) => {\r\n          onRowSelect(row);\r\n        }}\r\n        pagination={true}\r\n        paginationPerPage={20}\r\n      />\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default React.memo(OrderDataTable);","import React from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Card from '@material-ui/core/Card';\r\nimport Divider from '@material-ui/core/Divider';\r\n// import moment from 'moment';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction mapStateToProps(state) {\r\n  let {setAdmin} = state;\r\n  return {\r\n    ...setAdmin\r\n  };\r\n}\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\n\r\nclass OrderDeliveryForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ...props\r\n    }\r\n  }\r\n  Review = () => {\r\n    \r\n    let {customer, deliveryBoys} = this.props;\r\n    console.log(customer);\r\n    const {\r\n      driver_id, deliver_date, delivery_type, proof_img, complete_delivery, \r\n      // order_cancel_reason, \r\n      boxes, milk_packets} = customer.delivery;\r\n\r\n    let driver = deliveryBoys.get(driver_id);\r\n\r\n    function mapDeliveryType(delivery_type) {\r\n      switch (delivery_type) {\r\n        \r\n        case \"in_hand\":\r\n          return \"In Hand Delivery - कस्टमर के हाथ में डिलीवरी की\"\r\n        case \"doorstep\":\r\n          return \"Doorstep Delivery - घर के गेट के बहार आर्डर रखा\"\r\n        case \"society_guard\":\r\n          return \"Handed over to society guard - सोसाइटी गार्ड के पास आर्डर छोड़ा\"\r\n        case \"tower_guard\":\r\n          return \"Handed over to tower guard - टावर गार्ड के पास आर्डर छोड़ा\"\r\n        case \"order_cancelled\":\r\n          return \"Order Cancelled - आर्डर कैंसिल\"\r\n        default:\r\n          return <span style={{color: 'red'}}>Select Delivery Type - डिलीवरी कहाँ करी</span>;\r\n      }\r\n    }\r\n    function mapCompleteDelivery(complete_delivery) {\r\n      switch (complete_delivery) {\r\n        \r\n        case \"yes\":\r\n          return \"Yes - हाँ, मैंने पूरा आर्डर डिलीवर किया\"\r\n        case \"no\":\r\n          return \"No - नहीं,  पूरा आर्डर डिलीवर नहीं हुआ है\"\r\n        default:\r\n          return <span style={{color: 'red'}}>Complete Order Delivered? - क्या आपने पूरा आर्डर डिलीवर किया?</span>;\r\n      }\r\n    }\r\n    return (\r\n      <div className=\"pv-10\">\r\n        \r\n        {\r\n        customer.delivery.deliver_date ?\r\n        <Card variant=\"outlined\">\r\n          <div className=\"p-10\">\r\n            <Typography variant=\"body\">Delivered By</Typography>\r\n            <Typography variant=\"h6\">\r\n              {driver.name}\r\n            </Typography>\r\n          </div>\r\n          <Divider />\r\n          <div className=\"p-10\">\r\n            <Typography variant=\"body\">Delivered On</Typography>\r\n            <Typography variant=\"h6\">\r\n              {new Date(deliver_date).toDateString()}\r\n            </Typography>\r\n          </div>\r\n          <Divider />\r\n          <div className=\"p-10\">\r\n              <Typography variant=\"body\">Delivery Type - डिलीवरी कहाँ करी</Typography>\r\n              <Typography variant=\"h6\">\r\n                {mapDeliveryType(delivery_type)}\r\n              </Typography>\r\n          </div>\r\n          <Divider />\r\n          <div className=\"p-10\">\r\n            <Typography variant=\"body\">Delivery Photo</Typography>\r\n            {\r\n              proof_img ?\r\n              <div>\r\n                <img alt=\"order\" src={proof_img} width={300} /> \r\n              </div> :\r\n              <Typography variant=\"h6\"><span style={{color: 'red'}}>No Picture taken</span></Typography>\r\n            }\r\n          </div>\r\n          <Divider />\r\n          <div className=\"p-10\">\r\n          <Typography variant=\"body\">Complete Order Delivered? - क्या पूरा आर्डर डिलीवर किया?</Typography>\r\n            <Typography variant=\"h6\">\r\n              {mapCompleteDelivery(complete_delivery)}\r\n            </Typography>\r\n          </div>\r\n          <Divider />\r\n          <div className=\"p-10\">\r\n          <Typography variant=\"body\">Boxes - कितने डब्बे डिलीवर करे</Typography>\r\n            <Typography variant=\"h6\">{boxes}</Typography>\r\n          </div>\r\n          <Divider />\r\n          <div className=\"p-10\">\r\n          <Typography variant=\"body\">Milk Packets - कितने दूध के पैकेट डिलीवर करे</Typography>\r\n            <Typography variant=\"h6\">{milk_packets}</Typography>\r\n          </div>\r\n        </Card> :\r\n        \r\n          <Typography variant=\"h3\" style={{color: 'red'}} >\r\n            Not Delivered yet\r\n          </Typography>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n  render() {\r\n    \r\n    let {customer} = this.props;\r\n    \r\n    return (\r\n      <div >\r\n        {customer && <Dialog \r\n          fullScreen \r\n          open={true}\r\n          TransitionComponent={Transition}\r\n        >\r\n          <AppBar\r\n            position=\"fixed\"\r\n            color=\"default\"\r\n          >\r\n            <Toolbar>\r\n              <IconButton \r\n                edge=\"start\" \r\n                color=\"inherit\" \r\n                onClick={() => {\r\n                  this.props.setSelectedCustomer(false);\r\n                }} \r\n                aria-label=\"close\"\r\n              >\r\n                <CloseIcon />\r\n              </IconButton>\r\n              <Typography variant=\"h6\" >\r\n                {customer.name}\r\n              </Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n          <div style={{margin: '60px 10px 20px 10px', padding: '30px 10px'}}>\r\n            <Typography variant=\"h4\" >\r\n              Delivery Information\r\n            </Typography>\r\n            <Divider />\r\n            <this.Review />\r\n          </div>\r\n        </Dialog>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps\r\n)(OrderDeliveryForm);\r\n","import React, { Component, useCallback, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport DownloadIcon from '@material-ui/icons/CloudDownload';\r\nimport UploadIcon from '@material-ui/icons/CloudUpload';\r\nimport exportCSV from '../helpers/exportCSV';\r\nimport CSVReader from 'react-csv-reader';\r\n\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nimport Loading from './Loading';\r\nimport OrderDataTable from './OrderDataTable';\r\nimport {assignDrivers, getAllOrders} from '../api/admin';\r\nimport DeliveryInfo from \"./DeliveryInfo\";\r\nimport {updateOrdersData} from '../actions/admin.actions';\r\n\r\nfunction mapStateToProps(state) {\r\n  let {setAdmin} = state;\r\n  return {\r\n    ...setAdmin\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onUpdateOrdersData: (data) => dispatch(updateOrdersData(data)),\r\n  };\r\n}\r\n\r\nclass OrderManagement extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      phone: \"\",\r\n      selectedArea: [],\r\n      selectedSubarea: 'all',\r\n      selectedHub: 'all',\r\n      selectedDriver: 'all',\r\n      showWithoutDairy: false,\r\n      hiddenAddress: false,\r\n      selectedRow: []\r\n    }\r\n  }\r\n  hideAddress = () => this.setState({hiddenAddress: true})\r\n  \r\n  exportData = () => {\r\n    let {customers, deliveryBoys } = this.props;\r\n    let data = Array.from(customers.values());\r\n\r\n    let rows = [\r\n      ['order_id', 'Crate', 'Name', 'Phone', 'Hub', 'Region', 'Locality', 'House', 'Order Type', 'Gable Top', 'Milk Packets', 'Paneer', 'Driver', 'Delivered By', 'crates', 'small_boxes', 'large_boxes'],\r\n    ];\r\n    data.forEach(item => {\r\n      const {order_id, crate_id, name, phone, address, onlyDairy, hasNoDairy, products, delivery_person_id, delivery } = item;\r\n      const {hub, area, subarea, house_number} = address;\r\n      const {driver_id, deliver_date} = delivery;\r\n      let order_type;\r\n      \r\n      if(onlyDairy) order_type = 'Dairy'\r\n      else if(hasNoDairy) order_type = 'Grocery'\r\n      else order_type = 'Dairy + Grocery';\r\n\r\n      let gable_top = 0, milk_packets = 0, paneer = 0, driverName = '', deliveredBy = '';\r\n      if('Dairy' in products) {\r\n        let dairyProducts = products['Dairy'];\r\n        dairyProducts.forEach(item => {\r\n          if(item.product_id === 811) gable_top += item.quantity;\r\n          if(item.product_id === 1) milk_packets += item.quantity;\r\n          if(item.product_id === 225) paneer += item.total;\r\n        });\r\n      }\r\n\r\n      if(delivery_person_id) {\r\n        let driver = deliveryBoys.get(delivery_person_id);\r\n        if(driver) driverName = driver.name;\r\n      }\r\n\r\n      if(driver_id && deliver_date) {\r\n        let driver = deliveryBoys.get(driver_id);\r\n        if(driver) deliveredBy = driver.name;\r\n      }\r\n\r\n      let row = [\r\n        order_id,\r\n        crate_id,\r\n        name, \r\n        phone,\r\n        hub,\r\n        area,\r\n        subarea,\r\n        `\"${house_number}\"`,\r\n        order_type,\r\n        gable_top,\r\n        milk_packets,\r\n        paneer,\r\n        driverName,\r\n        deliveredBy\r\n      ];\r\n      rows.push(row);\r\n    });\r\n    exportCSV(rows, `Delivery Sheet - ${new Date().toLocaleDateString()}.csv`);\r\n  }\r\n  render() {\r\n    let loading = true;\r\n    let {selectedArea, selectedHub, selectedDriver, orderType, phone, showDelivered } = this.state;\r\n    let {customers, locations, hubs, deliveryBoys} = this.props;\r\n    let deliveryBoysData = deliveryBoys ? Array.from(deliveryBoys.values()) : [];\r\n    deliveryBoysData = deliveryBoysData.sort((a, b) => (a.name.localeCompare(b.name)));\r\n\r\n    /* \r\n      locations = {\r\n        \"Gurgaon\": {\r\n          \"Sector 69\": [\r\n            \"Tulip White\"\r\n          ]\r\n        },\r\n        \"South Delhi\": {\r\n\r\n        }\r\n      }\r\n    */\r\n    // console.log(locations);\r\n    let areas = [], subareas = [];\r\n    \r\n    if(locations) locations.forEach((hub, hubName) => {\r\n      hub.forEach((area, areaName) => {\r\n        // if valid, insert into areas\r\n        if( (hubName === selectedHub) || (selectedHub === 'all') ) {\r\n          areas.push(areaName);\r\n        }\r\n        \r\n        if( selectedArea.includes(areaName) || selectedArea.length === 0 ) {\r\n          subareas.concat(area);\r\n        }\r\n      });\r\n    });\r\n    areas = areas.sort((a, b) => a.localeCompare(b));\r\n\r\n    // if(selectedHub !== 'all') {\r\n    //   let filteredAreas = locations.get(selectedHub);\r\n    //   areas = Array.from(filteredAreas.keys());\r\n\r\n    //   areas = areas.sort((a, b) => a.localeCompare(b));\r\n      \r\n    //   let subareasCollection =  Array.from(filteredAreas.values());\r\n    //   // selectedArea !== 'all' ? [filteredAreas.get(selectedArea)] : Array.from(filteredAreas.values());\r\n    //   if(selectedArea && selectedArea.length) {\r\n    //     selectedArea.forEach(area => {\r\n    //       subareasCollection.concat(filteredAreas.get(area));\r\n    //     })\r\n    //   }\r\n    //   subareas = [];\r\n    //   subareasCollection.forEach(areaSubareas => {\r\n    //     areaSubareas.forEach(subarea => subareas.push(subarea));\r\n    //   });\r\n    //   subareas = subareas.sort((a, b) => a.localeCompare(b));\r\n    // }\r\n\r\n    // if(selectedArea && selectedArea.length) {\r\n      \r\n    //   let filteredAreas = new Map();\r\n    //   Array.from(locations.keys()).forEach(hub => {\r\n    //     if(locations.get(hub).has(selectedArea)) {\r\n    //       filteredAreas = locations.get(hub);\r\n    //     }\r\n    //   })\r\n\r\n    //   let subareasCollection = [filteredAreas.get(selectedArea)]\r\n    //   subareas = [];\r\n    //   subareasCollection.forEach(areaSubareas => {\r\n    //     areaSubareas.forEach(subarea => subareas.push(subarea));\r\n    //   });\r\n    //   subareas = subareas.sort((a, b) => a.localeCompare(b));\r\n    // }\r\n    \r\n    let data = [];\r\n    if(customers) {\r\n      loading = false\r\n      data = Array.from(customers.values());\r\n\r\n      /* \r\n      Clear all Filters\r\n          phone: \"\",\r\n          selectedArea: [],\r\n          selectedSubarea: 'all',\r\n          selectedHub: 'all',\r\n          selectedDriver: 'all',\r\n          showWithoutDairy: false,\r\n          showDelivered: false,\r\n          orderType: 'all'\r\n       */\r\n      data = data.filter((item) => {\r\n        if(selectedHub !== 'all') {\r\n          if(item.address.hub !== selectedHub) return false;\r\n        }\r\n        if(selectedArea.length) {\r\n          if(!selectedArea.includes(item.address.area)) return false;\r\n        }\r\n        // if(selectedSubarea !== 'all') {\r\n        //   if(item.address.subarea !== selectedSubarea) return false;\r\n        // }\r\n        if(selectedDriver !== 'all') {\r\n          if(selectedDriver === 'none') {\r\n            if(item.delivery_person_id !== null) return false;\r\n          } else if(item.delivery_person_id !== selectedDriver) return false;\r\n        }\r\n        if(showDelivered) {\r\n          if(item.delivery.deliver_date) return true;\r\n          return false;\r\n        }\r\n        if(orderType) {\r\n          console.log(orderType)\r\n          switch (orderType) {\r\n            case 'all':\r\n              return true;\r\n            case 'dairy':\r\n              return item.onlyDairy;\r\n            case 'grocery':\r\n              return item.hasNoDairy;\r\n            case 'both':\r\n              return item.hasNoDairy === false && item.onlyDairy === false;\r\n            default:\r\n              return true;\r\n          }\r\n        }\r\n        if(phone) {\r\n          if(item.phone.indexOf(phone) !== -1) return true;\r\n          if(item.name.toLowerCase().indexOf(phone.toLowerCase()) !== -1) return true;\r\n          if(item.order_id.toString().indexOf(phone.toLowerCase()) !== -1) return true;\r\n          if(String(item.crate_id) === phone) return true;\r\n          return false;\r\n        }\r\n        return true;\r\n      })\r\n\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          loading?\r\n          <Loading /> :\r\n          <div>\r\n            <div \r\n              className=\"flex middle\"\r\n              style={{padding: 10}}\r\n            >\r\n              <div style={{marginRight: 20, width: 220}}>\r\n                <TextField\r\n                  value={phone}\r\n                  fullWidth\r\n                  label=\"Phone, Name, Crate, Order Id\"\r\n                  onChange={(e) => this.setState({phone: e.target.value})}\r\n                />\r\n              </div>\r\n\r\n              <div style={{marginRight: 20, width: 120}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"hub-filter\">Hub</InputLabel>\r\n                  <Select\r\n                    labelId=\"hub-filter\"\r\n                    style={{width: 100}}\r\n                    value={selectedHub}\r\n                    onChange={(e) => {\r\n                      let selectedHub = e.target.value;\r\n                      this.setState({selectedHub, selectedArea: 'all', selectedSubarea: 'all'})\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    {hubs.map(item => (\r\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                  </FormControl>\r\n              </div>\r\n              \r\n              <div style={{marginRight: 20, width: 250}}>\r\n                <FormControl style={{width: '100%'}}>\r\n                  <Autocomplete\r\n                    labelId=\"area-filter\"\r\n                    options={areas}\r\n                    // getOptionLabel={partner => partner.name}\r\n                    multiple={true}\r\n                    renderInput={(params) => <TextField {...params} label=\"Area\" />}\r\n                    onChange={(e, selectedArea) => {\r\n                      console.log(selectedArea);\r\n                      this.setState({selectedArea, selectedSubarea: 'all'})\r\n                    }}\r\n                  />\r\n                </FormControl>\r\n              </div>\r\n\r\n              \r\n              {/* <div style={{marginRight: 20, width: 180}}>\r\n                <FormControl style={{width: '100%'}}>\r\n                  <Autocomplete\r\n                    labelId=\"area-filter\"\r\n                    options={subareas}\r\n                    // getOptionLabel={partner => partner.name}\r\n                    renderInput={(params) => <TextField {...params} label=\"Sub-Areas\" />}\r\n                    onChange={(e, selectedSubarea) => {\r\n                      this.setState({ selectedSubarea: selectedSubarea || 'all'})\r\n                    }}\r\n                  />\r\n                  </FormControl>\r\n              </div> */}\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"driver-filter\">Assigned Driver</InputLabel>\r\n                  <Select\r\n                    labelId=\"driver-filter\"\r\n                    style={{width: 200}}\r\n                    value={selectedDriver || 'all'}\r\n                    onChange={(e, b) => {\r\n                      let selectedDriver = e.target.value;\r\n                      this.setState({selectedDriver});\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    <MenuItem value=\"none\">None</MenuItem>\r\n                    {deliveryBoysData.map(item => (\r\n                      <MenuItem value={item.id} key={`driver-${item.id}`}>{item.name}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch\r\n                      checked={showDelivered}\r\n                      onChange={(e, showDelivered) => this.setState({showDelivered})}\r\n                      color=\"primary\"\r\n                    />\r\n                  }\r\n                  label=\"Only Delivered\"\r\n                />\r\n              </div>\r\n\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"order-type-filter\">Order Type</InputLabel>\r\n                  <Select\r\n                    labelId=\"order-type-filter\"\r\n                    style={{width: 200}}\r\n                    onChange={(e) => {\r\n                      this.setState({orderType: e.target.value});\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    <MenuItem value=\"dairy\">Dairy</MenuItem>\r\n                    <MenuItem value=\"grocery\">Grocery</MenuItem>\r\n                    <MenuItem value=\"both\">Dairy + Grocery</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    window.location.reload();\r\n                  }}\r\n                >\r\n                  Clear All Filters\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            \r\n            <AssignOrders \r\n              data={data}\r\n              exportData={this.exportData}\r\n              deliveryBoys={deliveryBoys}\r\n            />\r\n          </div>\r\n        }\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst AssignOrders = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(\r\n  (props) => {\r\n  const {data, deliveryBoys, onUpdateOrdersData} = props;\r\n\r\n  let deliveryBoysData = Array.from(deliveryBoys.values());\r\n  deliveryBoysData = deliveryBoysData.sort((a, b) => (a.name.localeCompare(b.name)));\r\n  \r\n  let [selectedRows, setSelectedRows] = useState([]);\r\n  const [selectedCustomer, setSelectedCustomer] = useState(false);\r\n\r\n  const onSelectCustomer = useCallback((selectedCustomer) => {\r\n    setSelectedCustomer(selectedCustomer);\r\n  }, []);\r\n  \r\n  const changeSelection = useCallback(({ allSelected, selectedCount, selectedRows }) => {\r\n    setSelectedRows(selectedRows)\r\n  }, []);\r\n\r\n  const updateDriver = (e) => {\r\n    let order_ids = selectedRows.map(item => item.order_id);\r\n    let driver = e.target.value;\r\n    const data = {\r\n      order_ids, driver\r\n    }\r\n    assignDrivers(data)\r\n    .then(res => {\r\n      getAllOrders()\r\n      .then(res => {\r\n        let orders = res.data;\r\n        onUpdateOrdersData(orders);\r\n      });\r\n      setSelectedRows([]);\r\n    });\r\n  }\r\n  \r\n  const handleFileError = (val) => {\r\n    window.alert(\"Something is not right in this CSV\");\r\n  }\r\n  const handleFile = (data, fileInfo) => {\r\n    window.alert(\"Nice\");\r\n  }\r\n\r\n  return (\r\n    <div id=\"assign-orders\">\r\n      <Divider />\r\n      <div className=\"flex space-bw middle p-10\">\r\n        <div className=\"flex right middle\">\r\n          \r\n          <FormControl variant=\"outlined\" size=\"small\">\r\n            <InputLabel id=\"driver-filter\">Select Driver</InputLabel>\r\n            <Select\r\n              labelId=\"driver-filter\"\r\n              style={{width: 200}}\r\n              disabled={selectedRows.length < 1}\r\n              onChange={updateDriver}\r\n            >\r\n              <MenuItem value=\"null\">None</MenuItem>\r\n              {deliveryBoysData.map(item => (\r\n                <MenuItem value={item.id} key={`driver-${item.id}`}>{item.name}</MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n          <div className=\"p-10\">\r\n            {\r\n              data.length \r\n            } Customers Filtered\r\n          </div>\r\n          <div className=\"p-10\">\r\n            {\r\n              selectedRows.length \r\n            } Customers Selected\r\n          </div>\r\n          <div className=\"p-10\">\r\n            <Button \r\n              startIcon={<DownloadIcon />}\r\n              color=\"secondary\"\r\n              variant=\"outlined\"\r\n              onClick={props.exportData}\r\n              // disabled={true}\r\n            >\r\n              Download Excel\r\n            </Button>\r\n          </div>\r\n          <CSVReader\r\n            cssInputClass=\"csv-input\"\r\n            label={\r\n              <div className=\"flex middle\">\r\n                <div className=\"icon\">\r\n                  <UploadIcon />\r\n                </div>\r\n                UPLOAD BAG AND CRATE\r\n              </div>\r\n              // <Button \r\n              //   startIcon={<UploadIcon />}\r\n              //   color=\"secondary\"\r\n              //   variant=\"outlined\"\r\n              // >\r\n              //   Upload CSV\r\n              // </Button>\r\n            }\r\n            cssLabelClass=\"csv-input-label\"\r\n            onFileLoaded={handleFile}\r\n            onError={handleFileError}\r\n            parserOptions={{\r\n              header: true,\r\n              dynamicTyping: true,\r\n              skipEmptyLines: true,\r\n              transformHeader: header => header.toLowerCase().replace(/\\W/g, \"_\")\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n      <DeliveryInfo \r\n        customer={selectedCustomer}\r\n        setSelectedCustomer={setSelectedCustomer}\r\n      />\r\n      <OrderDataTable\r\n        data={data}\r\n        onSelectionChange={changeSelection}\r\n        onRowSelect={onSelectCustomer}\r\n        deliveryBoys={deliveryBoys}\r\n      />\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps\r\n)(OrderManagement);"],"sourceRoot":""}