{"version":3,"sources":["helpers/exportCSV.js","components/OrderTable.js","components/AssignOrders.jsx","constants/config.js","components/OrderManagement.jsx"],"names":["downloadCSV","array","filename","link","document","createElement","rows","forEach","row","join","push","csv","match","setAttribute","encodeURI","click","sortIcon","OrderDataTable","props","data","onSelectionChange","onRowSelect","deliveryBoys","orderBoxData","columns","name","selector","sortable","width","cell","orderId","boxData","get","parseInt","crateId","idx","driverId","driver","striped","noHeader","selectableRows","onSelectedRowsChange","dense","selectableRowsComponent","Checkbox","highlightOnHover","pointerOnHover","pagination","paginationPerPage","React","memo","connect","state","setAdmin","dispatch","onUpdateOrdersData","updateOrdersData","deliveryBoysData","Array","from","values","sort","a","b","localeCompare","useState","selectedRows","setSelectedRows","setSelectedCustomer","onSelectCustomer","useCallback","selectedCustomer","changeSelection","allSelected","selectedCount","id","Divider","className","FormControl","size","InputLabel","Select","labelId","style","disabled","length","onChange","e","order_ids","map","item","target","value","assignDrivers","then","res","getAllOrders","orders","MenuItem","Button","startIcon","color","variant","onClick","exportData","POUCH_MILK_PRODUCTS","BOX_MILK_PRODUCTS","OrderManagement","hideAddress","setState","hiddenAddress","orderProducts","filterData","index","driverName","customerID","phone","region","area","subarea","address","orderProductsData","commonFields","replace","pouchMilkQty","gableTopQty","productId","qty","includes","alert","largeBox","mediumBox","packet","console","log","exportCSV","Date","toLocaleDateString","loading","selectedArea","selectedSubarea","selectedHub","selectedDriver","showWithoutDairy","selectedRow","this","filter","indexOf","toLowerCase","toString","locations","hubs","areas","subareas","hub","hubName","areaName","concat","Loading","padding","marginRight","TextField","fullWidth","label","Autocomplete","options","multiple","renderInput","params","window","location","reload","Component"],"mappings":"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","file":"static/js/OrderManagement.a16470b7.chunk.js","sourcesContent":["function downloadCSV(array, filename = 'export.csv') {\r\n  const link = document.createElement('a');\r\n  let rows = [];\r\n  array.forEach(row => {\r\n    row = row.join(',');\r\n    rows.push(row);\r\n  });\r\n  let csv = rows.join('\\n');\r\n  if (csv == null) return;\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = `data:text/csv;charset=utf-8,${csv}`;\r\n  }\r\n\r\n  link.setAttribute('href', encodeURI(csv));\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nexport default downloadCSV;","import React from 'react';\r\nimport DataTable from \"react-data-table-component\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\n\r\nconst sortIcon = <ArrowDownward />;\r\n\r\nfunction OrderDataTable(props) {\r\n  const {data, onRowSelect, onSelectionChange, deliveryBoys, orderBoxData} = props;\r\n\r\n  const columns = [\r\n    // {\r\n    //   name: 'Crate',\r\n    //   selector: 'crate_id',\r\n    //   sortable: true,\r\n    //   width: '70px'\r\n    // },\r\n    {\r\n      name: 'Order Id',\r\n      selector: 'orderId',\r\n      sortable: true,\r\n      width: '130px'\r\n    },\r\n    {\r\n      name: 'Crate Id',\r\n      selector: 'orderId',\r\n      sortable: true,\r\n      cell: (row) => {\r\n        const {orderId} = row;\r\n        const boxData = orderBoxData.get(parseInt(orderId));\r\n        return boxData?.crateId;\r\n      }\r\n    },\r\n    {\r\n      name: 'Name',\r\n      selector: 'name',\r\n      sortable: true,\r\n      width: '200px'\r\n    },\r\n    {\r\n      name: 'Phone',\r\n      selector: 'phone',\r\n      sortable: true,\r\n      width: '140px'\r\n    },\r\n    {\r\n      name: 'Hub',\r\n      sortable: true,\r\n      selector: 'region',\r\n      width: '100px',\r\n    },\r\n    {\r\n      name: 'Area',\r\n      sortable: true,\r\n      selector: 'area',\r\n      width: '140px'\r\n    },\r\n    {\r\n      name: 'Locality',\r\n      sortable: true,\r\n      selector: 'subarea',\r\n      width: '150px'\r\n    },\r\n    {\r\n      name: 'House',\r\n      selector: 'address',\r\n      width: '300px'\r\n    },\r\n    {\r\n      name: 'Driver',\r\n      selector: '_driver',\r\n      cell: (row, idx) => {\r\n        let {driverId} = row;\r\n        if(driverId) {\r\n          let driver = deliveryBoys.get(driverId);\r\n          return driver ? driver.name : '';\r\n        }\r\n        return '';\r\n      }\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <DataTable\r\n        striped={true}\r\n        noHeader\r\n        selectableRows\r\n        onSelectedRowsChange={onSelectionChange}\r\n        dense={true}\r\n        selectableRowsComponent={Checkbox}\r\n        sortIcon={sortIcon}\r\n        data={data}\r\n        columns={columns}\r\n        highlightOnHover={true}\r\n        pointerOnHover={true}\r\n        pagination={true}\r\n        paginationPerPage={10}\r\n        // onRowClicked={(row, e) => {\r\n        //   onRowSelect(row);\r\n        // }}\r\n      />\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default React.memo(OrderDataTable);","import React, { useCallback, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport DownloadIcon from '@material-ui/icons/CloudDownload';\r\n\r\nimport OrderDataTable from './OrderTable';\r\nimport {assignDrivers, getAllOrders} from '../api/v2/admin';\r\n// import DeliveryInfo from \"./DeliveryInfo\";\r\nimport {updateOrdersData} from '../actions/admin.actions';\r\n\r\nfunction mapStateToProps(state) {\r\n  let {setAdmin} = state;\r\n  return {\r\n    ...setAdmin\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onUpdateOrdersData: (data) => dispatch(updateOrdersData(data)),\r\n  };\r\n}\r\n\r\nfunction AssignOrders(props) {\r\n  const {data, deliveryBoys, onUpdateOrdersData, orderBoxData} = props;\r\n\r\n  let deliveryBoysData = Array.from(deliveryBoys.values());\r\n  deliveryBoysData = deliveryBoysData.sort((a, b) => (a.name.localeCompare(b.name)));\r\n  \r\n  let [selectedRows, setSelectedRows] = useState([]);\r\n  const [selectedCustomer, setSelectedCustomer] = useState(false);\r\n\r\n  const onSelectCustomer = useCallback((selectedCustomer) => {\r\n    setSelectedCustomer(selectedCustomer);\r\n  }, []);\r\n  \r\n  const changeSelection = useCallback(({ allSelected, selectedCount, selectedRows }) => {\r\n    setSelectedRows(selectedRows)\r\n  }, []);\r\n\r\n  const updateDriver = (e) => {\r\n    let order_ids = selectedRows.map(item => item.orderId);\r\n    let driver = e.target.value;\r\n    const data = {\r\n      order_ids, driver\r\n    }\r\n    assignDrivers(data)\r\n    .then(res => {\r\n      getAllOrders()\r\n      .then(res => {\r\n        let orders = res.data;\r\n        onUpdateOrdersData(orders);\r\n      });\r\n      setSelectedRows([]);\r\n    });\r\n  }\r\n  \r\n  return (\r\n    <div id=\"assign-orders\">\r\n      <Divider />\r\n      <div className=\"flex space-bw middle p-10\">\r\n        <div className=\"flex right middle\">\r\n          \r\n          <FormControl size=\"small\">\r\n            <InputLabel id=\"driver-filter\">Select Driver</InputLabel>\r\n            <Select\r\n              labelId=\"driver-filter\"\r\n              style={{width: 200}}\r\n              disabled={selectedRows.length < 1}\r\n              onChange={updateDriver}\r\n            >\r\n              <MenuItem value=\"null\">None</MenuItem>\r\n              {deliveryBoysData.map(item => (\r\n                <MenuItem value={item.id} key={`driver-${item.id}`}>{item.name}</MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n          <div className=\"p-10\">\r\n            {\r\n              data.length \r\n            } Customers Filtered\r\n          </div>\r\n          <div className=\"p-10\">\r\n            {\r\n              selectedRows.length \r\n            } Customers Selected\r\n          </div>\r\n          <div className=\"p-10\">\r\n            <Button \r\n              startIcon={<DownloadIcon />}\r\n              color=\"secondary\"\r\n              variant=\"outlined\"\r\n              onClick={props.exportData}\r\n            >\r\n              Download Excel\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <OrderDataTable\r\n        data={data}\r\n        orderBoxData={orderBoxData}\r\n        onSelectionChange={changeSelection}\r\n        onRowSelect={onSelectCustomer}\r\n        deliveryBoys={deliveryBoys}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AssignOrders);","export const POUCH_MILK_PRODUCTS =  [1, 2, 3, 23];\r\nexport const BOX_MILK_PRODUCTS =    [4, 811, 877];","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport exportCSV from '../helpers/exportCSV';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n// import FormControlLabel from '@material-ui/core/FormControlLabel';\r\n// import Switch from '@material-ui/core/Switch';\r\n\r\nimport Loading from './Loading';\r\nimport AssignOrders from './AssignOrders'\r\nimport {POUCH_MILK_PRODUCTS, BOX_MILK_PRODUCTS} from '../constants/config';\r\n\r\nfunction mapStateToProps(state) {\r\n  let {setAdmin} = state;\r\n  return {\r\n    ...setAdmin\r\n  };\r\n}\r\n\r\nclass OrderManagement extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      phone: \"\",\r\n      selectedArea: [],\r\n      selectedSubarea: [],\r\n      selectedHub: [],\r\n      selectedDriver: \"all\",\r\n      showWithoutDairy: false,\r\n      hiddenAddress: false,\r\n      selectedRow: []\r\n    }\r\n  }\r\n  hideAddress = () => this.setState({hiddenAddress: true})\r\n  \r\n  exportData = () => {\r\n    \r\n    const { deliveryBoys, orderBoxData, orderProducts } = this.props;\r\n    let rows = [\r\n      ['S.No.', 'Order Id', 'Crate Id', 'Customer Id', 'Name', 'Phone', 'Region', 'Area', 'Locality', 'House', 'Driver', 'Type', 'Qty']\r\n    ];\r\n    let data = this.filterData();\r\n\r\n    for (let index = 0; index < data.length; index++) {\r\n      const item = data[index];\r\n      \r\n      let {driverId} = item;\r\n      let driverName = '';\r\n      if(driverId) {\r\n        driverName = deliveryBoys.get(driverId).name;\r\n      }\r\n      const {customerID, orderId, name, phone, region, area, subarea, address} = item;\r\n      const boxData = orderBoxData.get(parseInt(orderId));\r\n      const orderProductsData = orderProducts.get(parseInt(orderId));\r\n      \r\n      const commonFields = [\r\n        index+1,\r\n        orderId,\r\n        boxData?.crateId,\r\n        customerID,\r\n        `\"${name}\"`,\r\n        phone,\r\n        `\"${region}\"`,\r\n        `\"${area}\"`,\r\n        `\"${subarea}\"`,\r\n        `\"${address.replace(/[^0-9a-zA-Z:/ ]/g, \"\")}\"`,\r\n        `\"${driverName}\"`\r\n      ]\r\n\r\n      let pouchMilkQty = 0;\r\n      let gableTopQty = 0;\r\n\r\n      if(orderProductsData) {\r\n        // console.log(orderProductsData)\r\n        orderProductsData.forEach(item => {\r\n          const {productId, qty} = item;\r\n          if(POUCH_MILK_PRODUCTS.includes(productId)) {\r\n            pouchMilkQty += qty;\r\n          } else if(BOX_MILK_PRODUCTS.includes(productId)) {\r\n            gableTopQty += qty;\r\n          }\r\n        })\r\n\r\n        if(pouchMilkQty) {\r\n          rows.push([\r\n            ...commonFields,\r\n            'Pouch Milk',\r\n            pouchMilkQty\r\n          ])\r\n        }\r\n        \r\n        if(gableTopQty) {\r\n          rows.push([\r\n            ...commonFields,\r\n            'Gable Top',\r\n            gableTopQty\r\n          ])\r\n        } \r\n      } else {\r\n        alert(\"Something wrong with data uploaded for order\", orderId);\r\n      }\r\n\r\n      // Handle LargeBox, MediumBox, Packet\r\n      const {largeBox, mediumBox, packet } = boxData || {};\r\n      if(largeBox) {\r\n        rows.push([\r\n          ...commonFields,\r\n          `Large Box`,\r\n          largeBox\r\n        ]);\r\n      }\r\n\r\n      if(mediumBox) {\r\n        rows.push([\r\n          ...commonFields,\r\n          `Large Box`,\r\n          mediumBox\r\n        ]);\r\n      }\r\n      \r\n      if(packet) {\r\n        rows.push([\r\n          ...commonFields,\r\n          `Large Box`,\r\n          packet\r\n        ]);\r\n      }\r\n\r\n      if(gableTopQty || pouchMilkQty || largeBox || mediumBox || packet ) {\r\n        console.log(\"Already Loaded Customer in the sheet\");\r\n      } else {\r\n        console.log(`This is not ideal. Maybe the packing is not over yet.\\nAn order should have atleast one of gableTopQty || pouchMilkQty || largeBox || mediumBox || packet `)\r\n        // alert(`This is not ideal. Maybe the packing is not over yet.\\nAn order should have atleast one of gableTopQty || pouchMilkQty || largeBox || mediumBox || packet `);\r\n        \r\n        rows.push([\r\n          ...commonFields,\r\n          'Complete', \r\n          ''\r\n        ]);\r\n        // return;\r\n      }  \r\n    }\r\n\r\n    exportCSV(rows, `Delivery Sheet - ${new Date().toLocaleDateString()}.csv`);\r\n  }\r\n  filterData() {\r\n    let {selectedSubarea, selectedArea, selectedHub, selectedDriver, phone } = this.state;\r\n    let { orders} = this.props;\r\n\r\n    console.log(\"STATE\", this.state);\r\n    \r\n    let data = [];\r\n    \r\n    if(orders) {\r\n      data = orders.filter((item) => {\r\n        if(selectedHub.length) {\r\n          if(item.region !== selectedHub) return false;\r\n        }\r\n        if(selectedArea.length) {\r\n          if(!selectedArea.includes(item.area)) return false;\r\n        }\r\n        if(selectedSubarea.length) {\r\n          if(!selectedSubarea.includes(item.subarea)) return false;\r\n        }\r\n        if(selectedDriver !== 'all') {\r\n          if(selectedDriver === 'none') {\r\n            if(item.driverId !== null) return false;\r\n          } else if(item.driverId !== selectedDriver) return false;\r\n        }\r\n        if(phone) {\r\n          if(item.phone.indexOf(phone) !== -1) return true;\r\n          if(item.name.toLowerCase().indexOf(phone.toLowerCase()) !== -1) return true;\r\n          if(item.orderId.toString().indexOf(phone.toLowerCase()) !== -1) return true;\r\n          return false;\r\n        }\r\n        return true;\r\n      })\r\n    }\r\n    \r\n    return data;\r\n  }\r\n  render() {\r\n    let loading = true;\r\n    let {selectedArea, selectedHub, selectedDriver, phone } = this.state;\r\n    let {locations, hubs, deliveryBoys, orders} = this.props;\r\n\r\n    let deliveryBoysData = deliveryBoys ? Array.from(deliveryBoys.values()) : [];\r\n    deliveryBoysData = deliveryBoysData.sort((a, b) => (a.name.localeCompare(b.name)));\r\n\r\n    let areas = [], subareas = [];\r\n    \r\n    if(locations) locations.forEach((hub, hubName) => {\r\n      hub.forEach((area, areaName) => {\r\n        console.log(areaName, area)\r\n        if( (hubName === selectedHub) || (selectedHub.length === 0) ) {\r\n          areas.push(areaName);\r\n        }\r\n        if( selectedArea.includes(areaName) || selectedArea.length === 0 ) {\r\n          subareas = subareas.concat(area);\r\n        }\r\n      });\r\n    });\r\n\r\n    areas = areas.sort((a, b) => a.localeCompare(b));\r\n\r\n    if(orders) {\r\n      loading = false;\r\n    }\r\n\r\n    let data = this.filterData();\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          loading?\r\n          <Loading /> :\r\n          <div>\r\n            <div \r\n              className=\"flex middle\"\r\n              style={{padding: 10}}\r\n            >\r\n              <div style={{marginRight: 20, width: 220}}>\r\n                <TextField\r\n                  value={phone}\r\n                  fullWidth\r\n                  label=\"Phone, Name, Crate, Order Id\"\r\n                  onChange={(e) => this.setState({phone: e.target.value})}\r\n                />\r\n              </div>\r\n\r\n              <div style={{marginRight: 20, width: 120}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"hub-filter\">Hub</InputLabel>\r\n                  <Select\r\n                    labelId=\"hub-filter\"\r\n                    style={{width: 100}}\r\n                    value={selectedHub}\r\n                    onChange={(e) => {\r\n                      let selectedHub = e.target.value;\r\n                      this.setState({selectedHub, selectedArea: [], selectedSubarea: []})\r\n                    }}\r\n                  >\r\n                    {/* <MenuItem value=\"all\">All</MenuItem> */}\r\n                    {hubs.map(item => (\r\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                  </FormControl>\r\n              </div>\r\n              \r\n              <div style={{marginRight: 20, width: 300}}>\r\n                <FormControl style={{width: '100%'}}>\r\n                  <Autocomplete\r\n                    options={areas}\r\n                    multiple={true}\r\n                    renderInput={(params) => <TextField {...params} label=\"Area\" />}\r\n                    onChange={(e, selectedArea) => {\r\n                      this.setState({selectedArea, selectedSubarea: []})\r\n                    }}\r\n                  />\r\n                </FormControl>\r\n              </div>\r\n\r\n              <div style={{marginRight: 20, width: 400}}>\r\n                <FormControl style={{width: '100%'}}>\r\n                  <Autocomplete\r\n                    options={subareas}\r\n                    multiple={true}\r\n                    renderInput={(params) => <TextField {...params} label=\"Locality\" />}\r\n                    onChange={(e, selectedSubarea) => {\r\n                      this.setState({selectedSubarea})\r\n                    }}\r\n                  />\r\n                </FormControl>\r\n              </div>\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"driver-filter\">Assigned Driver</InputLabel>\r\n                  <Select\r\n                    labelId=\"driver-filter\"\r\n                    style={{width: 200}}\r\n                    value={selectedDriver || 'all'}\r\n                    onChange={(e, b) => {\r\n                      let selectedDriver = e.target.value;\r\n                      this.setState({selectedDriver});\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    <MenuItem value=\"none\">None</MenuItem>\r\n                    {deliveryBoysData.map(item => (\r\n                      <MenuItem value={item.id} key={`driver-${item.id}`}>{item.name}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    window.location.reload();\r\n                  }}\r\n                >\r\n                  Clear All Filters\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            \r\n            <AssignOrders \r\n              data={data}\r\n              exportData={this.exportData}\r\n              deliveryBoys={deliveryBoys}\r\n            />\r\n          </div>\r\n        }\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps\r\n)(OrderManagement);"],"sourceRoot":""}