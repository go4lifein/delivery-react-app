{"version":3,"sources":["components/DriverNavbar.js","components/DriverLogin.js","containers/Driver.jsx","images/logo.png","actions/driver.actions.js","api/v2/driver.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","getTitle","location","pathname","withRouter","connect","state","setDriver","dispatch","onUpdateDriver","driver","updateDriver","props","classes","className","AppBar","position","color","Toolbar","src","logo","alt","Typography","variant","IconButton","onClick","window","reload","Button","setCookie","Divider","LoginAdmin","phone","handleSubmit","login","then","res","initRequestAuthHeader","data","catch","err","alert","this","style","display","justifyContent","alignItems","background","height","Card","minWidth","CardHeader","CardContent","marginBottom","TextField","autoFocus","fullWidth","autoComplete","label","type","name","value","onChange","e","setState","target","to","Component","admin","ChooseOrder","lazy","OrderDeliveryForm","Driver","DriverNavbar","fallback","Loading","path","component","DriverLogin","UPDATE_DRIVER","payload","updateOrders","orders","UPDATE_ORDERS","url","API_URL","request","method","headers","getMyOrders","driverId","submitOrderDelivery","formData","post"],"mappings":"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","file":"static/js/Driver.5a06e034.chunk.js","sourcesContent":["import React from 'react';\nimport { withRouter } from \"react-router\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport RefreshIcon from '@material-ui/icons/Refresh'\n// import { Link } from 'react-router-dom';\nimport logo from '../images/logo.png';\nimport { Divider } from '@material-ui/core';\nimport { connect } from 'react-redux';\n\nimport {updateDriver} from '../actions/driver.actions';\nimport {setCookie} from '../helpers/utils';\n\nfunction mapStateToProps(state) {\n  let {setDriver} = state;\n  return {\n    ...setDriver\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onUpdateDriver: (driver) => dispatch(updateDriver(driver))\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nfunction getTitle(location) {\n  switch (location.pathname) {\n    case '/admin/product':\n      return 'Product Sheet';\n    case '/admin/manageOrders':\n      return 'Manage Orders';\n    default:\n      return 'Choose Order';\n  }\n}\n\nfunction MenuAppBar(props) {\n  const classes = useStyles();\n  const { location} = props;\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" color=\"warning\">\n        <Toolbar>\n          <img src={logo} alt=\"logo\" className=\"logo-nav\" />\n          <Typography variant=\"h5\" className={classes.title}>\n            {getTitle(location)}\n          </Typography>\n          \n          <div className=\"flex\">\n            <IconButton \n              onClick={() => {\n                window.location.reload();\n              }}\n            >\n              <RefreshIcon />\n            </IconButton>\n            <Button\n              className=\"nav-link\"\n              color=\"secondary\"\n              onClick={() => {\n                let {onUpdateDriver} = props;\n                setCookie('x-driver-token', '', 0);\n                onUpdateDriver(null);\n              }}\n            >\n              Logout\n            </Button>\n            \n          </div>\n\n        </Toolbar>\n      </AppBar>\n      <Divider />\n    </div>\n  );\n}\n\nexport default withRouter(connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MenuAppBar));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {Link} from 'react-router-dom';\nimport { Button, Card, CardContent, CardHeader, Divider, TextField } from '@material-ui/core';\n\nimport {login} from '../api/v2/driver';\nimport {updateDriver} from '../actions/driver.actions';\nimport {initRequestAuthHeader, setCookie} from '../helpers/utils';\n\nfunction mapStateToProps(state) {\n  let {setDriver} = state;\n  return {\n    ...setDriver\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onUpdateDriver: (admin) => dispatch(updateDriver(admin))\n  };\n}\n\nclass LoginAdmin extends Component {\n  state = {\n    phone: '',\n  }\n  handleSubmit = () => {\n    let {onUpdateDriver} = this.props;\n    let {phone } = this.state;\n    login({phone})\n    .then(res => {\n      setCookie(\"x-driver-token\", phone, 5);\n      initRequestAuthHeader(\"x-driver-token\");\n      onUpdateDriver(res.data);\n    })\n    .catch(err => alert(\"Please check phone number\"));\n  }\n  render() {\n    let {phone} = this.state;\n    return (\n      <div \n        style={{\n          display: \"flex\", \n          justifyContent: 'center', \n          alignItems: 'center',\n          background: 'grey',\n          height: '100vh'\n        }}\n      >\n        <Card style={{minWidth: 300}}>\n          <CardHeader title=\"Login\" />\n          <Divider />\n          <CardContent>\n            <div style={{marginBottom: 10}}>\n              <TextField\n                autoFocus\n                variant=\"outlined\"\n                fullWidth\n                autoComplete=\"true\"\n                label=\"Phone Number\"\n                type=\"number\"\n                name=\"Phone Number\"\n                value={phone}\n                onChange={(e) => this.setState({phone: e.target.value})}\n              />\n            </div>\n            <div>\n              <Button \n                variant=\"contained\" \n                fullWidth\n                color=\"primary\"\n                onClick={this.handleSubmit}\n              >\n                Login\n              </Button>\n            </div>\n          </CardContent>\n          <Divider />\n          <CardContent>\n          <div>\n            <Link to=\"/admin\">\n              Login as Admin\n            </Link>\n          </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LoginAdmin);","import React, { Suspense,  Component, lazy} from 'react';\nimport { connect } from 'react-redux';\nimport { Switch, Route } from \"react-router-dom\";\n\nimport Loading from '../components/Loading';\nimport DriverNavbar from \"../components/DriverNavbar\";\nimport DriverLogin from '../components/DriverLogin';\nimport {getCookie} from '../helpers/utils'\n\nconst ChooseOrder = lazy(() => import('../components/ChooseOrder'));\nconst OrderDeliveryForm = lazy(() => import('../components/OrderDeliveryForm'));\n\nfunction mapStateToProps(state) {\n  let {setDriver} = state;\n  return {\n    ...setDriver\n  };\n}\n\nclass Driver extends Component {\n  componentDidMount() {\n    // if()\n  }\n  render() {\n    const {driver} = this.props;\n    return (\n      <div>\n        {driver ?\n          <div>\n            <DriverNavbar />\n            <Suspense fallback={<Loading />}>\n              <Switch>\n                <Route \n                  path=\"/:orderId/deliver\"\n                  component={OrderDeliveryForm}\n                />\n                <Route \n                  path=\"/\"\n                  component={ChooseOrder} \n                />\n              </Switch>\n            </Suspense>\n          </div> :\n          <DriverLogin />\n        }\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps\n)(Driver);","export default __webpack_public_path__ + \"static/media/logo.8f39d4d2.png\";","import {UPDATE_DRIVER, UPDATE_ORDERS} from '../constants/index';\n\nexport const updateDriver = (driver) => ({\n  type: UPDATE_DRIVER,\n  payload: driver\n});\n\nexport const updateOrders = (orders) => ({\n  type: UPDATE_ORDERS,\n  payload: orders\n});","import {API_URL , request, getRequest} from '../../helpers/utils';\nimport { post } from 'axios';\n\nexport function login(data) {\n  let url = `${API_URL}/v2/driver/login`;\n  return request({\n    url: url,\n    method: 'post',\n    data,\n    headers: {\n      'Content-Type': 'application/json',\n    }\n  });\n}\n\nexport function getDriver() {\n  let url = `${API_URL}/v2/driver/getDriver`;\n  return getRequest(url);\n}\n\n\nexport function getMyOrders(driverId) {\n  let url = `${API_URL}/v2/driver/getMyOrders`;\n  return request({\n    url: url,\n    method: 'get',\n    headers: {\n      'Content-Type': 'application/json',\n    }\n  });\n}\n\n// not used\nexport function confirmDelivery(data) {\n  let url = `${API_URL}/order/confirmDelivery`;\n  return request({\n    url: url,\n    method: 'post',\n    data,\n    headers: {\n      'Content-Type': 'application/json',\n    }\n  });\n}\n\nexport function submitOrderDelivery(formData) {\n  let url = `${API_URL}/v2/driver/submitOrderDelivery`;\n  const config = {\n    headers: {\n      'content-type': 'multipart/form-data'\n    }\n  }\n  return post(url, formData, config);\n}"],"sourceRoot":""}