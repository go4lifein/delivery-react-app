{"version":3,"sources":["components/DriverOrderTable.js","components/ChooseOrder.js"],"names":["React","memo","withRouter","props","data","history","id","map","item","address","area","phone","orderId","region","name","subarea","delivery_instruction","region_id","customerID","driverId","location_id","orderDate","Card","style","margin","CardHeader","onClick","deliveryId","alert","push","title","className","marginLeft","Divider","CardContent","backgroundColor","Typography","variant","color","paddingTop","paddingBottom","href","fontWeight","toString","ChooseOrder","state","selectedArea","selectedSubarea","selectedHub","showDelivered","this","onUpdateOrdersData","driver","getMyOrders","then","res","orders","filter","length","includes","indexOf","toLowerCase","loading","locations","hubs","areas","subareas","forEach","hub","hubName","areaName","concat","sort","a","b","localeCompare","filterData","Loading","padding","Grid","container","spacing","xs","TextField","fullWidth","value","label","onChange","e","setState","target","FormControl","InputLabel","Select","labelId","MenuItem","FormControlLabel","control","Switch","checked","Button","selectedDriver","showWithoutDairy","Component","connect","setDriver","dispatch","updateOrders"],"mappings":"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","file":"static/js/46.c2e57924.chunk.js","sourcesContent":["import React from 'react';\nimport { withRouter } from \"react-router\";\n// import DataTable from \"react-data-table-component\";\nimport PhoneIcon from '@material-ui/icons/Phone';\nimport Card from '@material-ui/core/Card';\n// import Link from 'react-router-dom';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\n\nfunction DriverOrderTable(props) {\n  \n  const {data, history} = props;\n\n  return (\n    <div id=\"order cards\">\n      {data.map(item => {\n        const {\n          address,\n          area,\n          phone,\n          orderId,\n          region,\n          name,\n          subarea,\n          region_id,\n          customerID,\n          driverId,\n          location_id,\n          orderDate,\n          delivery_instruction,\n        } = item;\n\n        return (\n          <Card\n            key={orderId.toString()}\n            style={{\n              margin: 10\n            }}\n          >\n            <CardHeader\n              onClick={() => {\n                if(item.deliveryId) {\n                  alert('Already delivered');\n                  return;\n                }\n                history.push(`/${orderId}/deliver`)\n              }}\n              title={ \n                <div>\n                  <div className=\"flex middle\">\n                    {/* <Avatar style={{background: 'red'}}>\n                      {\"10\"}\n                    </Avatar> */}\n                    <div style={{marginLeft: 10}}>\n                      {name}\n                    </div>\n                  </div>\n                </div>\n              }\n            />\n            {\n              delivery_instruction && <>\n                <Divider />\n                <CardContent style={{backgroundColor: 'blue'}}>\n                  <Typography variant=\"body1\" style={{color:\"#fff\"}}>Delivery Instructions</Typography>\n                  <Typography variant=\"h5\" style={{color:\"#fff\"}}>{delivery_instruction}</Typography>\n                </CardContent>\n              </>\n            }\n            <Divider />\n            <CardContent>\n              <div style={{paddingTop: 10, paddingBottom: 10}}>\n                <a href={`tel:+91${phone}`} className=\"flex middle\">\n                  <PhoneIcon /> {phone}\n                </a>\n              </div>\n              <div>\n                <span style={{fontWeight: 'bold'}}>\n                  Address\n                </span> {address}, {subarea}, {area}, {region}\n              </div>\n            </CardContent>\n          </Card>\n        )\n      })}\n    </div>\n  )\n};\n\nexport default React.memo(withRouter(DriverOrderTable));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport { Button, TextField, Grid } from '@material-ui/core';\n\nimport Loading from '../components/Loading';\nimport {getMyOrders} from '../api/v2/driver';\nimport {updateOrders} from '../actions/driver.actions';\nimport DriverOrderTable from './DriverOrderTable';\n\nfunction mapStateToProps(state) {\n  let {setDriver} = state;\n  return {\n    ...setDriver\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onUpdateOrdersData: (data) => dispatch(updateOrders(data))\n  };\n}\n\nclass ChooseOrder extends Component {\n  state = {\n    phone: \"\",\n    selectedArea: [],\n    selectedSubarea: [],\n    selectedHub: \"\",\n    showDelivered: false\n  }\n  componentDidMount() {\n    let {onUpdateOrdersData, driver} = this.props;\n    getMyOrders(driver.id)\n    .then(res => {\n      onUpdateOrdersData(res.data);\n    })\n  }  \n  filterData() {\n    let {selectedSubarea, selectedArea, selectedHub, phone } = this.state;\n    let { orders } = this.props;\n    \n    let data = [];\n    \n    if(orders) {\n      data = orders.filter((item) => {\n        if(selectedHub) {\n          // console.log(selectedHub, item.region)\n          if(item.region !== selectedHub) return false;\n        }\n        if(selectedArea.length) {\n          if(!selectedArea.includes(item.area)) return false;\n        }\n        if(selectedSubarea.length) {\n          if(!selectedSubarea.includes(item.subarea)) return false;\n        }\n        if(phone) {\n          if(item.phone.indexOf(phone) !== -1) return true;\n          if(item.name.toLowerCase().indexOf(phone.toLowerCase()) !== -1) return true;\n          if(item.orderId.toString().indexOf(phone.toLowerCase()) !== -1) return true;\n          return false;\n        }\n        return true;\n      })\n    }\n    return data;\n  }\n  render() {\n    let loading = true, data = [];\n    let {selectedArea, selectedHub, selectedSubarea, phone, showDelivered } = this.state;\n    let {orders, locations, hubs} = this.props;\n    \n    let areas = [], subareas = [];\n    \n    if(locations) locations.forEach((hub, hubName) => {\n      hub.forEach((area, areaName) => {\n        if( selectedHub === hubName ) {\n          areas.push(areaName);\n        }\n        if( selectedArea.includes(areaName) || selectedArea.length === 0) {\n          subareas = subareas.concat(area);\n        }\n      });\n    });\n\n    areas = areas.sort((a, b) => a.localeCompare(b));\n    subareas = subareas.sort((a, b) => a.localeCompare(b));\n\n    if(orders) {\n      loading = false;\n      data = this.filterData();\n      data = data.filter((item) => {\n        if(showDelivered) {\n          if(item.deliveryId) return true;\n          return false;\n        } else {\n          if(item.deliveryId) return false;\n          return true;\n        }\n      })\n    }\n\n    data = data.sort((a, b) => a.location_id - b.location_id);\n\n    return (\n      <div>\n        {\n          loading ? \n          <Loading /> :\n          <div>\n            <div\n              className=\"flex middle\"\n              style={{padding: 10}}\n            >\n\n              <Grid container spacing={2}>\n                <Grid item xs={6}>\n                  <TextField\n                    fullWidth\n                    value={phone}\n                    label=\"Phone or Name\"\n                    onChange={(e) => this.setState({phone: e.target.value})}\n                  />\n                </Grid>\n\n              <Grid item xs={6}>\n                <FormControl fullWidth>\n                  <InputLabel id=\"hub-filter\">Hub</InputLabel>\n                  <Select\n                    fullWidth\n                    labelId=\"hub-filter\"\n                    value={selectedHub}\n                    onChange={(e) => {\n                      let selectedHub = e.target.value;\n                      this.setState({selectedHub, selectedArea: [], selectedSubarea: []})\n                    }}\n                  >\n                    {/* <MenuItem value=\"all\">All</MenuItem> */}\n                    {hubs.map(item => (\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n            </Grid>\n              \n            </div>\n\n            <div\n              className=\"flex middle\"\n              style={{padding: 10}}\n            >\n              \n              <Grid container spacing={2}>\n                <Grid item xs={6}>\n                <FormControl fullWidth>\n                  <InputLabel id=\"area-filter\">Area</InputLabel>\n                  <Select\n                    labelId=\"area-filter\"\n                    fullWidth\n                    value={selectedArea}\n                    onChange={(e) => {\n                      let selectedArea = e.target.value;\n                      this.setState({selectedArea, selectedSubarea: []})\n                    }}\n                  >\n                    {/* <MenuItem value=\"all\">All</MenuItem> */}\n                    {areas.map(item => (\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={6}>\n                <FormControl fullWidth>\n                  <InputLabel id=\"subarea-filter\">Subareas</InputLabel>\n                  <Select\n                    labelId=\"subarea-filter\"\n                    fullWidth\n                    value={selectedSubarea}\n                    onChange={(e, b) => {\n                      let selectedSubarea = e.target.value;\n                      this.setState({selectedSubarea});\n                    }}\n                  >\n                    {/* <MenuItem value=\"all\">All</MenuItem> */}\n                    {subareas.map(item => (\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\n                    ))}\n                  </Select>\n                  </FormControl>\n              </Grid>\n              \n            </Grid>\n            </div>\n            <div\n              className=\"flex space-bw\"\n              style={{padding: 10}}\n            >\n              <div>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={showDelivered}\n                      onChange={(e, showDelivered) => this.setState({showDelivered})}\n                      color=\"primary\"\n                    />\n                  }\n                  label=\"Delivered\"\n                />\n              </div>\n              <div >\n                <Button\n                  color=\"primary\"\n                  onClick={() => {\n                    this.setState({\n                      phone: \"\",\n                      selectedArea: 'all',\n                      selectedSubarea: 'all',\n                      selectedHub: 'all',\n                      selectedDriver: 'all',\n                      showWithoutDairy: false\n                    })\n                  }}\n                >\n                  Clear All Filters\n                </Button>\n              </div>\n            </div>\n            \n            <DriverOrderTable \n              data={data}\n            />\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ChooseOrder);"],"sourceRoot":""}