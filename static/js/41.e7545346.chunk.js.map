{"version":3,"sources":["components/UI/ConfirmAndSubmitButton.js","components/utils/CSVUploadAndPreview.js","api/delivery.js","api/api.js","components/Customer/DeliveryInstructions.js"],"names":["ConfirmAndSubmitButton","onSubmit","onCancel","label","message","confirmLabel","cancelLabel","alertTitle","props","React","useState","showAlert","setShowAlert","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","onClick","color","variant","autoFocus","parseOptions","header","dynamicTyping","skipEmptyLines","transformHeader","replace","CSVUploadAndPreview","hints","papaparseOptions","validator","maxLength","filterDataCallback","mapDataCallback","tableProps","csvData","setData","showData","toggleData","fileInfo","setFileInfo","undefined","columns","setColumns","error","setError","className","cssClass","style","fontSize","marginRight","onFileLoaded","data","filter","map","firstItem","length","keys","Object","key","name","selector","width","sortable","hadError","parseInt","forEach","item","err","console","log","updateCSV","cssLabelClass","cssInputClass","parserOptions","fullScreen","padding","backgroundColor","borderRadius","Alert","severity","e","disabled","Boolean","Divider","fixedHeader","noHeader","pagination","deliveryApi","api","addDriverData","putRequest","path","updateDeliveryInstructions","instructions","postRequest","getCustomersWithInstructions","get","this","config","getRequestParam","param","a","Promise","resolve","reject","request","url","method","params","then","res","catch","store","dispatch","enqueueAPIErrorSnackbar","setRequestAuthHeader","accessToken","axios","defaults","headers","common","create","formData","post","baseURL","API_URL","timeout","DeliveryInstructions","refreshData","setState","customers","filterData","state","search","includes","phone","onSearch","target","value","response","enqueueSnackbar","validateInstructions","instructionRecord","instruction","Error","filterValidInstructions","loading","Loading","title","actions","TextField","onChange","progressComponent","Component","withSnackbar"],"mappings":"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","file":"static/js/41.e7545346.chunk.js","sourcesContent":["import React from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Button from '@material-ui/core/Button';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nfunction ConfirmAndSubmitButton({\r\n  onSubmit,\r\n  onCancel,\r\n  label = \"Submit\",\r\n  message = \"Are you sure you want to proceed?\",\r\n  confirmLabel = \"Yes, proceed\",\r\n  cancelLabel = \"Cancel\",\r\n  alertTitle,\r\n  ...props\r\n}) {\r\n  const [showAlert, setShowAlert] = React.useState(false);\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={showAlert}\r\n        onClose={() => setShowAlert(false)}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        \r\n        {alertTitle && <DialogTitle id=\"alert-dialog-title\">{alertTitle}</DialogTitle>}\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            {message}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={onCancel} color=\"primary\">\r\n            {cancelLabel}\r\n          </Button>\r\n          <Button onClick={onSubmit} color=\"primary\" variant=\"contained\" autoFocus>\r\n            {confirmLabel}\r\n          </Button>\r\n        </DialogActions>\r\n        \r\n      </Dialog>\r\n      <Button \r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        {...props}\r\n        onClick={() => setShowAlert(true)}\r\n      >\r\n        {label}\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ConfirmAndSubmitButton;","import React, { useState } from 'react'\r\nimport CSVReader from 'react-csv-reader'\r\nimport DataTable from 'react-data-table-component';\r\nimport './css/csvStyles.css';\r\nimport Alert from '@material-ui/lab/Alert'\r\nimport UploadIcon from '@material-ui/icons/CloudUpload'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport ConfirmAndSubmitButton from '../UI/ConfirmAndSubmitButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nconst parseOptions = {\r\n\theader: true,\r\n\tdynamicTyping: true,\r\n\tskipEmptyLines: true,\r\n\ttransformHeader: header => header.replace(/\\W/g, \"_\")\r\n};\r\n\r\n/**\r\n * ## CSVUploadAndPreview\r\n * \r\n * * `validator`: a function that validates and throws an error if data is not correct\r\n * * `mapDataCallback`: a function that is used as a callback for `data.map(mapDataCallback)`\r\n */\r\nfunction CSVUploadAndPreview({\r\n\thints, \r\n\tlabel = \"Upload File\", \r\n\tpapaparseOptions = parseOptions,\r\n\tvalidator,\r\n\tmaxLength,\r\n\tfilterDataCallback,\r\n\tmapDataCallback,\r\n\ttableProps = {\r\n\t\tpagination: true\r\n\t},\r\n\tonSubmit,\r\n\t...props\r\n}) {\r\n\r\n\tconst [csvData, setData] = useState([]);\r\n\tconst [showData, toggleData] = useState(false);\r\n\tconst [fileInfo, setFileInfo] = useState(null);\r\n\tconst [columns, setColumns] = useState(undefined)\r\n\tconst [error, setError] = useState(null)\r\n\r\n\tconst updateCSV = (data) => {\r\n\r\n\t\tif(filterDataCallback) data = data.filter(filterDataCallback);\r\n\r\n\t\tif(mapDataCallback) {\r\n\t\t\tdata = data.map(mapDataCallback);\r\n\t\t}\r\n\t\t\r\n\t\tlet firstItem = {};\r\n\t\tif (data.length) firstItem = data[0];\r\n\r\n\t\tlet keys = Object.keys(firstItem).map(key => ({\r\n\t\t\tname: key,\r\n\t\t\tselector: key,\r\n\t\t\twidth: '200px',\r\n\t\t\tsortable: true\r\n\t\t}));\r\n\r\n\r\n\t\tlet hadError = false;\r\n\t\tif(maxLength) {\r\n\t\t\thadError = true;\r\n\t\t\tmaxLength = parseInt(maxLength)\r\n\t\t\tif(data.length > maxLength) {\r\n\t\t\t\tsetError(`Total number of records can't exceed ${maxLength}. You added ${data.length}.`);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(validator) {\r\n\t\t\tdata.forEach(item => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tvalidator(item);\r\n\t\t\t\t} catch(err) {\r\n\t\t\t\t\tconsole.log(item);\r\n\t\t\t\t\thadError = true;\r\n\t\t\t\t\tsetError(err.message);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tif(!hadError) {\r\n\t\t\t\tsetError(null);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsetColumns(keys);\r\n\t\tsetData(data);\r\n\t\ttoggleData(true);\r\n\t}\r\n\r\n\tconst handleFileUpload = (data, fileInfo) => {\r\n\t\tupdateCSV(data);\r\n\t\tsetFileInfo(fileInfo);\r\n\t}\r\n\r\n\tconst onConfirmUpdate = (e) => {\r\n\t\tif(onSubmit) onSubmit(csvData);\r\n\t\ttoggleData(false);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className=\"flex middle\">\r\n\t\t\t\t<CSVReader\r\n\t\t\t\t\tcssClass=\"csv-reader-input\"\r\n\t\t\t\t\tlabel={<div className=\"flex center middle\" style={{fontSize: 16}}> <UploadIcon style={{marginRight: 8}} /> {label}</div>}\r\n\t\t\t\t\tonFileLoaded={handleFileUpload}\r\n\t\t\t\t\tcssLabelClass=\"csv-input-label\"\r\n\t\t\t\t\tcssInputClass=\"csv-input\"\r\n\t\t\t\t\tparserOptions={papaparseOptions}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\r\n\t\t\t{showData && <Dialog fullScreen open={showData}>\r\n\t\t\t\t<DialogTitle>\r\n\t\t\t\t\t<div className=\"flex space-bw middle\">\r\n\t\t\t\t\t\t<div>Preview Data - <span style={{padding: 4, backgroundColor: 'lightgreen', borderRadius: 4}}>{fileInfo && fileInfo.name}</span></div>\r\n\t\t\t\t\t\t<div className=\"flex middle\">\r\n\t\t\t\t\t\t{error && <Alert variant=\"standard\" severity=\"error\">\r\n\t\t\t\t\t\t\t{error}\r\n\t\t\t\t\t\t</Alert>}\r\n\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t<ConfirmAndSubmitButton \r\n\t\t\t\t\t\t\t\tonSubmit={onConfirmUpdate}\r\n\t\t\t\t\t\t\t\tdisabled={Boolean(error)}\r\n\t\t\t\t\t\t\t\tonCancel={() => toggleData(false)}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t\t\t</ConfirmAndSubmitButton>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<Button onClick={() => toggleData(false)}>\r\n\t\t\t\t\t\t\tCancel\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</DialogTitle>\r\n\t\t\t\t<Divider />\r\n\t\t\t\t<DialogContent>\r\n\t\t\t\t\t<DataTable\r\n\t\t\t\t\t\tfixedHeader={true}\r\n\t\t\t\t\t\tnoHeader={true}\r\n\t\t\t\t\t\tcolumns={columns}\r\n\t\t\t\t\t\tdata={csvData}\r\n\t\t\t\t\t\tpagination={true}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</DialogContent>\r\n\t\t\t</Dialog>}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CSVUploadAndPreview\r\n","import api from './api';\r\n\r\nclass DeliverApi {\r\n  constructor(api) {\r\n    this.api = api;\r\n    this.path = '/delivery'\r\n  }\r\n  addDriverData = (data) => {\r\n    return this.api.putRequest(this.path + `/addDeliveryPerson`, data);\r\n  }\r\n  updateDeliveryInstructions = (instructions = []) => {\r\n    return this.api.postRequest(this.path + `/updateDeliveryInstructions`, {instructions});\r\n  }\r\n  getCustomersWithInstructions = () => {\r\n    return this.api.get(this.path + `/getCustomersWithInstructions`);\r\n  }\r\n}\r\n\r\nconst deliveryApi = new DeliverApi(api);\r\n\r\nexport default deliveryApi;","import axios from 'axios';\r\nimport {enqueueAPIErrorSnackbar} from '../reducers/notifier';\r\nimport store from '../store';\r\nimport {API_URL} from '../helpers/utils';\r\n\r\nexport class API {\r\n  constructor(config) {\r\n    this.api = axios.create(config);\r\n  }\r\n  getRequestParam = async (path, param) => {\r\n    return new Promise((resolve, reject) => {\r\n      this.api.request({\r\n        url: path,\r\n        method: 'get',\r\n        params: param\r\n      })\r\n      .then(res => resolve(res.data))\r\n      .catch(err => {\r\n        store.dispatch(enqueueAPIErrorSnackbar(err));\r\n        reject(err);\r\n      });\r\n    })\r\n  }\r\n  get = (path) => {\r\n    return new Promise((resolve, reject) => {\r\n      this.api.request({\r\n        url: path,\r\n        method: 'get'\r\n      })\r\n      .then(res => resolve(res.data))\r\n      .catch(err => {\r\n        store.dispatch(enqueueAPIErrorSnackbar(err));\r\n        reject(err);\r\n      });\r\n    })\r\n  }\r\n  postRequest = (url, data) => {\r\n    return new Promise((resolve, reject) => {\r\n      this.api.request({\r\n        url: url,\r\n        method: 'post',\r\n        data\r\n      })\r\n      .then(res => resolve(res.data))\r\n      .catch(err => {\r\n        store.dispatch(enqueueAPIErrorSnackbar(err));\r\n        reject(err);\r\n      });\r\n    })\r\n  }\r\n  putRequest(url, data) {\r\n    return new Promise((resolve, reject) => {\r\n      this.api.request({\r\n        url: url,\r\n        method: 'put',\r\n        data\r\n      })\r\n      .then(res => resolve(res.data))\r\n      .catch(err => {\r\n        store.dispatch(enqueueAPIErrorSnackbar(err));\r\n        reject(err);\r\n      });\r\n    })\r\n  }\r\n  postFormData(url, formData) {\r\n    return new Promise((resolve, reject) => {\r\n      this.api.post(url, {\r\n        data: formData,\r\n        headers: { 'Content-type': 'multipart/form-data' }\r\n      })\r\n      .then(res => resolve(res.data))\r\n      .catch(err => {\r\n        store.dispatch(enqueueAPIErrorSnackbar(err));\r\n        reject(err);\r\n      });\r\n    })\r\n  }\r\n  setRequestAuthHeader = (key = \"x-admin-token\", accessToken) => {\r\n    axios.defaults.headers.common[key] = accessToken;\r\n  }\r\n}\r\n\r\nconst api = new API({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    timeout: 500\r\n  }\r\n});\r\n\r\nexport default api;","import React, { Component } from 'react';\r\nimport { TextField } from '@material-ui/core';\r\nimport { withSnackbar } from 'notistack';\r\nimport DataTable from \"react-data-table-component\";\r\nimport Loading from '../Loading';\r\nimport CSVUpload from '../utils/CSVUploadAndPreview';\r\n\r\nimport deliveryApi from \"../../api/delivery\";\r\n\r\nclass DeliveryInstructions extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      name: \"\",\r\n      phone: \"\",\r\n      search: \"\",\r\n      customers: [],\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.setState({\r\n      loading: false,\r\n    })\r\n    this.refreshData()\r\n  }\r\n  refreshData = async () => {\r\n    const data = await deliveryApi.getCustomersWithInstructions();\r\n    this.setState({\r\n      customers: data\r\n    })\r\n  }\r\n  filterData = () => {\r\n    let {search, customers} = this.state;\r\n    let data = [];\r\n    if (customers) {\r\n      data = customers.filter((item) => {\r\n        if (!item.name.includes(search) && !item.phone.includes(search))\r\n          return false;\r\n        return true;\r\n      })\r\n    }\r\n    return data;\r\n  }\r\n  columns = [\r\n    {\r\n      name: \"Customer\",\r\n      selector: 'name',\r\n      sortable: true,\r\n      width: '300px',\r\n\r\n    },\r\n    {\r\n      name: \"Instruction\",\r\n      selector: 'delivery_instruction',\r\n      sortable: true,\r\n      width: '300px'\r\n    }\r\n  ]\r\n\r\n  onSearch = (e) => {\r\n    this.setState({\r\n      search: e.target.value\r\n    })\r\n  }\r\n  updateDeliveryInstructions = (instructions) => {\r\n    deliveryApi.updateDeliveryInstructions(instructions)\r\n    .then(response => {\r\n        this.props.enqueueSnackbar(response, {\r\n        variant: 'success'\r\n      });\r\n    });\r\n  }\r\n  validateInstructions = (instructionRecord) => {\r\n    const {id, instruction} = instructionRecord;\r\n    if(!id) throw new Error(\"Column id is compulsory.\");\r\n    if(!instruction) throw new Error(\"Column instruction is compulsory.\");\r\n  }\r\n  filterValidInstructions = ({instruction, id}) => {\r\n    if(!id) return false;\r\n    if(!instruction) return false;\r\n    return true;\r\n  }\r\n  render() {\r\n    const { loading,  } = this.state;\r\n    let data = this.filterData();\r\n\r\n    if (loading) {\r\n      return <Loading />\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <DataTable\r\n          title={\"Customer Delivery Instructions\"}\r\n          actions={\r\n            <>\r\n              <div>\r\n                <TextField\r\n                  label=\"Search by Name or Phone\"\r\n                  value={this.state.search}\r\n                  onChange={this.onSearch}\r\n    \r\n                />\r\n              </div>\r\n              <div>\r\n                <CSVUpload \r\n                  label={\"Upload Delivery Instructions\"}\r\n                  maxLength={400}\r\n                  filterDataCallback={this.filterValidInstructions}\r\n                  validator={this.validateInstructions}\r\n                  mapDataCallback={({id, instruction}) => {\r\n                    instruction = instruction.replace(\"'\", '');\r\n                    return {id, instruction}\r\n                  }}\r\n                  onSubmit={this.updateDeliveryInstructions}\r\n                />\r\n              </div>\r\n            </>\r\n          }\r\n          progressComponent={<Loading />}\r\n          columns={this.columns}\r\n          data={data}\r\n          pagination={true}\r\n        />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withSnackbar(DeliveryInstructions);\r\n"],"sourceRoot":""}