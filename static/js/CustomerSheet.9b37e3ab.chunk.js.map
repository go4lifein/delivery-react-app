{"version":3,"sources":["helpers/exportCSV.js","../node_modules/@material-ui/icons/ArrowDownward.js","components/CustomerSheet.jsx"],"names":["downloadCSV","array","filename","link","document","createElement","rows","forEach","row","join","push","csv","match","setAttribute","encodeURI","click","_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","default","React","_default","d","CustomerSheet","props","updateState","state","setState","selectedRows","createCrateNumbers","Date","localStorage","getItem","toISOString","setHours","alert","setItem","creatingCrate","customers","orderCrateIds","item","order_id","crateId","crate_id","updateCrateId","then","res","window","location","reload","columns","name","selector","sortable","width","cell","idx","address","hub","phone","allProducts","style","textAlign","id","map","product","total","unit","quantity","className","toString","Math","random","exportData","data","Array","from","values","removeSelectedDairy","sort","c1","c2","customer","products","house_number","subarea","area","addressString","categories","entries","category","toLowerCase","includes","i","exportCSV","toLocaleDateString","loading","alreadyCreatedCratedToday","this","cratesLastCreated","today","console","log","valueOf","search","filter","length","minWidth","sortIcon","actions","label","marginRight","onChange","e","target","control","checked","color","variant","startIcon","size","disabled","onClick","Component","connect","setAdmin","dispatch","onUpdateOrdersData","updateOrdersData"],"mappings":"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","file":"static/js/CustomerSheet.9b37e3ab.chunk.js","sourcesContent":["function downloadCSV(array, filename = 'export.csv') {\r\n  const link = document.createElement('a');\r\n  let rows = [];\r\n  array.forEach(row => {\r\n    row = row.join(',');\r\n    rows.push(row);\r\n  });\r\n  let csv = rows.join('\\n');\r\n  if (csv == null) return;\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = `data:text/csv;charset=utf-8,${csv}`;\r\n  }\r\n\r\n  link.setAttribute('href', encodeURI(csv));\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nexport default downloadCSV;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z\"\n}), 'ArrowDownward');\n\nexports.default = _default;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport DataTable from \"react-data-table-component\";\r\nimport DownloadIcon from '@material-ui/icons/CloudDownload';\r\nimport Button from '@material-ui/core/Button';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport exportCSV from '../helpers/exportCSV';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { TextField, Switch, FormControlLabel } from '@material-ui/core';\r\n\r\nimport {updateOrdersData} from '../actions/admin.actions';\r\nimport {updateCrateId} from '../api/admin';\r\nimport Loading from './Loading';\r\n\r\nfunction mapStateToProps(state) {\r\n  let {setAdmin} = state;\r\n  return {\r\n    ...setAdmin\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onUpdateOrdersData: (data) => dispatch(updateOrdersData(data))\r\n  };\r\n}\r\nclass CustomerSheet extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      removeSelectedDairy: true\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    let {alreadyCreatedCratedToday} = this.props;\r\n\r\n    let cratesLastCreated = new Date(localStorage.getItem('cratesLastCreated'));\r\n\r\n    if(cratesLastCreated) {\r\n      cratesLastCreated = new Date(cratesLastCreated);\r\n      let today = new Date().setHours(0);\r\n\r\n      console.log(today, cratesLastCreated.valueOf())\r\n      if(cratesLastCreated > today) {\r\n        alreadyCreatedCratedToday = true;\r\n      }\r\n    }\r\n    this.setState({\r\n      alreadyCreatedCratedToday\r\n    })\r\n  }\r\n  updateState = state => {\r\n    this.setState({ selectedRows: state.selectedRows });\r\n  }\r\n  createCrateNumbers = () => {\r\n    let cratesLastCreated = new Date(localStorage.getItem('cratesLastCreated', new Date().toISOString()));\r\n    let today = new Date().setHours(0);\r\n    if(cratesLastCreated > today) {\r\n      alert(\"Crates IDs Already created\");\r\n      return;\r\n    }\r\n    localStorage.setItem('cratesLastCreated', new Date().toISOString());\r\n    this.setState({\r\n      creatingCrate: true\r\n    });\r\n    let {customers } = this.props;\r\n    let orderCrateIds = [\r\n      /*\r\n      {\r\n        order_id: \r\n        crate_id: \r\n      } \r\n      */\r\n    ];\r\n\r\n    customers.forEach(item => {\r\n      const {order_id, crateId} = item;\r\n      orderCrateIds.push({order_id, crate_id: crateId});\r\n    });\r\n    updateCrateId({orderCrateIds})\r\n    .then(res => {\r\n      window.location.reload();\r\n    })\r\n  }\r\n  columns = [\r\n    {\r\n      name: 'Crate',\r\n      selector: 'crate_id',\r\n      sortable: true,\r\n      width: '90px'\r\n    },\r\n    {\r\n      name: 'Order Id',\r\n      selector: 'order_id',\r\n      sortable: true,\r\n      width: '90px'\r\n    },\r\n    {\r\n      name: 'Hub',\r\n      sortable: true,\r\n      width: '100px',\r\n      cell: (row, idx) => {\r\n        let {address} = row;\r\n        return address.hub;\r\n      }\r\n    },\r\n    {\r\n      name: 'Name',\r\n      selector: 'name',\r\n      sortable: true,\r\n      width: '200px'\r\n      \r\n    },\r\n    {\r\n      name: 'Phone',\r\n      selector: 'phone',\r\n      sortable: true,\r\n      width: '140px'\r\n    },\r\n    {\r\n      name: 'Product',\r\n      selector: 'products',\r\n      sortable: false,\r\n      cell: (row, idx) => {\r\n        const {phone, allProducts} = row;\r\n        \r\n        return (\r\n          <table style={{width: '100%', textAlign: 'left'}} id=\"customer-sheet-table\">\r\n            <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th >Total</th>\r\n              <th >Qty</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {\r\n              allProducts.map(product => {\r\n                const { total, unit, quantity} = product;\r\n                const name = product.product;\r\n                return (\r\n                  <tr key={phone.toString() + Math.random().toString()}>\r\n                    <td>{name}</td>\r\n                    <td className=\"fixed-width-column\">{total} {unit}</td>\r\n                    <td className=\"fixed-width-column\">{quantity}</td>\r\n                  </tr>\r\n                )\r\n              })\r\n            }\r\n            </tbody>\r\n          </table>\r\n        );\r\n      }\r\n    }\r\n  ]\r\n  exportData = () => {\r\n    let {customers } = this.props;\r\n    let data = Array.from(customers.values());\r\n    const {removeSelectedDairy} = this.state;\r\n\r\n    data.sort((c1, c2) => c1.crate_id - c2.crate_id);\r\n\r\n    let rows = [\r\n      ['Crate', 'Hub', 'Name', 'Phone', 'Address', 'Product', 'Category', 'Total', 'Qty'],\r\n    ];\r\n    data.forEach(customer => {\r\n      const {products, phone, address} = customer;\r\n      const {house_number, subarea, area, hub} = address;\r\n      let addressString = `\"${house_number}, ${subarea}, ${area}\"`;\r\n      const categories = Object.entries(products);\r\n      let allProducts = [];\r\n      categories.forEach(([category, value]) => {\r\n        value.forEach(product => {\r\n          product.category = category;\r\n          if(removeSelectedDairy) {\r\n            if(product.product.toLowerCase().includes(\"milk\") || product.product.toLowerCase().includes(\"paneer\")) return;\r\n          }\r\n          allProducts.push(product);\r\n        });\r\n      });\r\n      allProducts.forEach((product, i) => {\r\n        const { total, unit, quantity, category} = product;\r\n        if(i === 0) {\r\n          let row = [\r\n            customer.crate_id, \r\n            `${hub}`, \r\n            `${customer.name}`, \r\n            `${phone}`,\r\n            addressString,\r\n            `\"${product.product}\"`,\r\n            `${category}`,\r\n            `${total} ${unit}`, \r\n            `${quantity}`\r\n          ];\r\n          rows.push(row);\r\n        } else {\r\n          let row = [\r\n            '', '', '', '', '',\r\n            `\"${product.product}\"`, \r\n            `${category}`,\r\n            `${total} ${unit}`, `${quantity}`\r\n          ];\r\n          rows.push(row);\r\n        }\r\n      });\r\n    });\r\n    exportCSV(rows, `Customer Sheet - ${new Date().toLocaleDateString()}.csv`);\r\n  }\r\n  render() {\r\n    let loading = true;\r\n\r\n    let {customers } = this.props;\r\n    let {creatingCrate, removeSelectedDairy, search, alreadyCreatedCratedToday } = this.state;\r\n\r\n    alreadyCreatedCratedToday = alreadyCreatedCratedToday || this.props.alreadyCreatedCratedToday;\r\n\r\n    \r\n    let data = [];\r\n\r\n    if(customers) {\r\n      loading = false;\r\n      data = Array.from(customers.values());\r\n\r\n      data.forEach(customer => {\r\n        const {products} = customer;\r\n        const categories = Object.entries(products);\r\n        let allProducts = [];\r\n        categories.forEach(([category, value]) => {\r\n          value.forEach(product => {\r\n            product.category = category;\r\n            if(removeSelectedDairy) {\r\n              if(product.product.toLowerCase().includes(\"milk\") || product.product.toLowerCase().includes(\"paneer\")) return;\r\n            }\r\n            allProducts.push(product);\r\n          });\r\n        });\r\n        customer.allProducts = allProducts;\r\n      });\r\n\r\n      data = data.filter(item => {\r\n        const {name, phone, allProducts, crate_id} = item;\r\n        if(allProducts.length === 0) return false;\r\n        if(alreadyCreatedCratedToday) {\r\n          if(crate_id) return true;\r\n          return false;\r\n        }\r\n        if(search) {\r\n          if(name.toLowerCase().includes(search.toLowerCase())) return true;\r\n          if(phone.toLowerCase().includes(search.toLowerCase())) return true;\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n    }\r\n\r\n    return (\r\n      <div>\r\n          {\r\n            loading?\r\n            <Loading /> :\r\n            <div id=\"customer-sheet-table\" style={{minWidth: 1000}}>\r\n              <DataTable\r\n                data={data}\r\n                columns={this.columns}\r\n                sortIcon={<ArrowDownward />}\r\n                actions={\r\n                  <div className=\"flex middle\">\r\n                    \r\n                    <TextField \r\n                      label=\"Search Customer\"\r\n                      style={{\r\n                        marginRight: 10\r\n                      }}\r\n                      onChange={(e) => {\r\n                        this.setState({\r\n                          search: e.target.value\r\n                        });\r\n                      }}\r\n                    />\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Switch\r\n                          checked={removeSelectedDairy}\r\n                          onChange={(e, removeSelectedDairy) => this.setState({ removeSelectedDairy })}\r\n                          color=\"primary\"\r\n                        />\r\n                      }\r\n                      label=\"Remove Milk and Paneer\"\r\n                    />\r\n                    \r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"primary\"\r\n                      startIcon={\r\n                        // <CircularProgress size={12} />\r\n                        creatingCrate ? <CircularProgress size={12} /> : null\r\n                      }\r\n                      disabled={creatingCrate || alreadyCreatedCratedToday}\r\n                      style={{\r\n                        marginRight: 4\r\n                      }}\r\n                      onClick={this.createCrateNumbers}\r\n                    >\r\n                      Create Crate Numbers\r\n                    </Button>\r\n\r\n                    <Button \r\n                      startIcon={<DownloadIcon />}\r\n                      color=\"secondary\"\r\n                      variant=\"outlined\"\r\n                      onClick={this.exportData}\r\n                    >\r\n                      Download Excel\r\n                    </Button>\r\n                  </div>\r\n                }\r\n                // onSelectedRowsChange={this.updateState}\r\n                // selectableRows\r\n              />\r\n            </div>\r\n          }\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CustomerSheet);"],"sourceRoot":""}