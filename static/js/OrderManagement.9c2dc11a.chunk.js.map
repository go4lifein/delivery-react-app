{"version":3,"sources":["helpers/exportCSV.js","components/OrderTable.js","components/AssignOrders.jsx","components/OrderManagement.jsx"],"names":["downloadCSV","array","filename","link","document","createElement","rows","forEach","row","join","push","csv","match","setAttribute","encodeURI","click","sortIcon","OrderDataTable","props","data","onSelectionChange","onRowSelect","deliveryBoys","console","log","columns","name","selector","sortable","width","cell","idx","driverId","driver","get","striped","noHeader","selectableRows","onSelectedRowsChange","dense","selectableRowsComponent","Checkbox","highlightOnHover","pointerOnHover","pagination","paginationPerPage","React","memo","connect","state","setAdmin","dispatch","onUpdateOrdersData","updateOrdersData","deliveryBoysData","Array","from","values","sort","a","b","localeCompare","useState","selectedRows","setSelectedRows","setSelectedCustomer","onSelectCustomer","useCallback","selectedCustomer","changeSelection","allSelected","selectedCount","id","Divider","className","FormControl","size","InputLabel","Select","labelId","style","disabled","length","onChange","e","order_ids","map","item","orderId","target","value","assignDrivers","then","res","getAllOrders","orders","MenuItem","Button","startIcon","color","variant","onClick","exportData","OrderManagement","hideAddress","setState","hiddenAddress","filterData","driverName","phone","region","area","subarea","address","replace","exportCSV","Date","toLocaleDateString","loading","selectedArea","selectedSubarea","selectedHub","selectedDriver","showWithoutDairy","selectedRow","this","filter","hub","includes","indexOf","toLowerCase","toString","locations","hubs","areas","subareas","hubName","areaName","concat","Loading","padding","marginRight","TextField","fullWidth","label","Autocomplete","options","multiple","renderInput","params","window","location","reload","Component"],"mappings":"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","file":"static/js/OrderManagement.9c2dc11a.chunk.js","sourcesContent":["function downloadCSV(array, filename = 'export.csv') {\r\n  const link = document.createElement('a');\r\n  let rows = [];\r\n  array.forEach(row => {\r\n    row = row.join(',');\r\n    rows.push(row);\r\n  });\r\n  let csv = rows.join('\\n');\r\n  if (csv == null) return;\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = `data:text/csv;charset=utf-8,${csv}`;\r\n  }\r\n\r\n  link.setAttribute('href', encodeURI(csv));\r\n  link.setAttribute('download', filename);\r\n  link.click();\r\n}\r\nexport default downloadCSV;","import React from 'react';\r\nimport DataTable from \"react-data-table-component\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\n\r\nconst sortIcon = <ArrowDownward />;\r\n\r\nfunction OrderDataTable(props) {\r\n  const {data, onRowSelect, onSelectionChange, deliveryBoys} = props;\r\n\r\n  console.log(deliveryBoys);\r\n\r\n  const columns = [\r\n    // {\r\n    //   name: 'Crate',\r\n    //   selector: 'crate_id',\r\n    //   sortable: true,\r\n    //   width: '70px'\r\n    // },\r\n    {\r\n      name: 'Order Id',\r\n      selector: 'orderId',\r\n      sortable: true,\r\n      width: '130px'\r\n    },\r\n    {\r\n      name: 'Name',\r\n      selector: 'name',\r\n      sortable: true,\r\n      width: '200px'\r\n    },\r\n    {\r\n      name: 'Phone',\r\n      selector: 'phone',\r\n      sortable: true,\r\n      width: '140px'\r\n    },\r\n    {\r\n      name: 'Hub',\r\n      sortable: true,\r\n      selector: 'region',\r\n      width: '100px',\r\n    },\r\n    {\r\n      name: 'Area',\r\n      sortable: true,\r\n      selector: 'area',\r\n      width: '140px'\r\n    },\r\n    {\r\n      name: 'Locality',\r\n      sortable: true,\r\n      selector: 'subarea',\r\n      width: '150px'\r\n    },\r\n    {\r\n      name: 'House',\r\n      selector: 'address',\r\n      width: '300px'\r\n    },\r\n    {\r\n      name: 'Driver',\r\n      selector: '_driver',\r\n      cell: (row, idx) => {\r\n        let {driverId} = row;\r\n        if(driverId) {\r\n          let driver = deliveryBoys.get(driverId);\r\n          return driver ? driver.name : '';\r\n        }\r\n        return '';\r\n      }\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <DataTable\r\n        striped={true}\r\n        noHeader\r\n        selectableRows\r\n        onSelectedRowsChange={onSelectionChange}\r\n        dense={true}\r\n        selectableRowsComponent={Checkbox}\r\n        sortIcon={sortIcon}\r\n        data={data}\r\n        columns={columns}\r\n        highlightOnHover={true}\r\n        pointerOnHover={true}\r\n        pagination={true}\r\n        paginationPerPage={10}\r\n        // onRowClicked={(row, e) => {\r\n        //   onRowSelect(row);\r\n        // }}\r\n      />\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default React.memo(OrderDataTable);","import React, { useCallback, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport DownloadIcon from '@material-ui/icons/CloudDownload';\r\n\r\nimport OrderDataTable from './OrderTable';\r\nimport {assignDrivers, getAllOrders} from '../api/v2/admin';\r\n// import DeliveryInfo from \"./DeliveryInfo\";\r\nimport {updateOrdersData} from '../actions/admin.actions';\r\n\r\nfunction mapStateToProps(state) {\r\n  let {setAdmin} = state;\r\n  return {\r\n    ...setAdmin\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onUpdateOrdersData: (data) => dispatch(updateOrdersData(data)),\r\n  };\r\n}\r\n\r\nfunction AssignOrders(props) {\r\n  const {data, deliveryBoys, onUpdateOrdersData} = props;\r\n\r\n  let deliveryBoysData = Array.from(deliveryBoys.values());\r\n  deliveryBoysData = deliveryBoysData.sort((a, b) => (a.name.localeCompare(b.name)));\r\n  \r\n  let [selectedRows, setSelectedRows] = useState([]);\r\n  const [selectedCustomer, setSelectedCustomer] = useState(false);\r\n\r\n  const onSelectCustomer = useCallback((selectedCustomer) => {\r\n    setSelectedCustomer(selectedCustomer);\r\n  }, []);\r\n  \r\n  const changeSelection = useCallback(({ allSelected, selectedCount, selectedRows }) => {\r\n    setSelectedRows(selectedRows)\r\n  }, []);\r\n\r\n  const updateDriver = (e) => {\r\n    let order_ids = selectedRows.map(item => item.orderId);\r\n    let driver = e.target.value;\r\n    const data = {\r\n      order_ids, driver\r\n    }\r\n    assignDrivers(data)\r\n    .then(res => {\r\n      getAllOrders()\r\n      .then(res => {\r\n        let orders = res.data;\r\n        onUpdateOrdersData(orders);\r\n      });\r\n      setSelectedRows([]);\r\n    });\r\n  }\r\n  \r\n  return (\r\n    <div id=\"assign-orders\">\r\n      <Divider />\r\n      <div className=\"flex space-bw middle p-10\">\r\n        <div className=\"flex right middle\">\r\n          \r\n          <FormControl size=\"small\">\r\n            <InputLabel id=\"driver-filter\">Select Driver</InputLabel>\r\n            <Select\r\n              labelId=\"driver-filter\"\r\n              style={{width: 200}}\r\n              disabled={selectedRows.length < 1}\r\n              onChange={updateDriver}\r\n            >\r\n              <MenuItem value=\"null\">None</MenuItem>\r\n              {deliveryBoysData.map(item => (\r\n                <MenuItem value={item.id} key={`driver-${item.id}`}>{item.name}</MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n          <div className=\"p-10\">\r\n            {\r\n              data.length \r\n            } Customers Filtered\r\n          </div>\r\n          <div className=\"p-10\">\r\n            {\r\n              selectedRows.length \r\n            } Customers Selected\r\n          </div>\r\n          <div className=\"p-10\">\r\n            <Button \r\n              startIcon={<DownloadIcon />}\r\n              color=\"secondary\"\r\n              variant=\"outlined\"\r\n              onClick={props.exportData}\r\n            >\r\n              Download Excel\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <OrderDataTable\r\n        data={data}\r\n        onSelectionChange={changeSelection}\r\n        onRowSelect={onSelectCustomer}\r\n        deliveryBoys={deliveryBoys}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AssignOrders);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport exportCSV from '../helpers/exportCSV';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nimport Loading from './Loading';\r\nimport AssignOrders from './AssignOrders'\r\n\r\nfunction mapStateToProps(state) {\r\n  let {setAdmin} = state;\r\n  return {\r\n    ...setAdmin\r\n  };\r\n}\r\n\r\nclass OrderManagement extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      phone: \"\",\r\n      selectedArea: [],\r\n      selectedSubarea: 'all',\r\n      selectedHub: 'all',\r\n      selectedDriver: 'all',\r\n      showWithoutDairy: false,\r\n      hiddenAddress: false,\r\n      selectedRow: []\r\n    }\r\n  }\r\n  hideAddress = () => this.setState({hiddenAddress: true})\r\n  \r\n  exportData = () => {\r\n    \r\n    const { deliveryBoys } = this.props;\r\n    let rows = [\r\n      ['Order Id', 'Name', 'Phone', 'Hub', 'Area', 'Locality', 'House', 'Driver']\r\n    ];\r\n    let data = this.filterData();\r\n    data.forEach(item => {\r\n      \r\n      let {driverId} = item;\r\n      let driverName = '';\r\n      if(driverId) {\r\n        driverName = deliveryBoys.get(driverId).name;\r\n      }\r\n      const {orderId, name, phone, region, area, subarea, address} = item;\r\n      \r\n      rows.push([\r\n        orderId,\r\n        `\"${name}\"`,\r\n        phone,\r\n        `\"${region}\"`,\r\n        `\"${area}\"`,\r\n        `\"${subarea}\"`,\r\n        `\"${address.replace(/[^0-9a-zA-Z:/ ]/g, \"\")}\"`,\r\n        `\"${driverName}\"`\r\n      ])\r\n    })\r\n    exportCSV(rows, `Delivery Sheet - ${new Date().toLocaleDateString()}.csv`);\r\n  }\r\n  filterData() {\r\n    let {selectedArea, selectedHub, selectedDriver, phone } = this.state;\r\n    let { orders} = this.props;\r\n    \r\n    let data = [];\r\n    if(orders) {\r\n      data = orders.filter((item) => {\r\n        if(selectedHub !== 'all') {\r\n          if(item.address.hub !== selectedHub) return false;\r\n        }\r\n        if(selectedArea.length) {\r\n          if(!selectedArea.includes(item.area)) return false;\r\n        }\r\n        if(selectedDriver !== 'all') {\r\n          if(selectedDriver === 'none') {\r\n            if(item.driverId !== null) return false;\r\n          } else if(item.driverId !== selectedDriver) return false;\r\n        }\r\n        if(phone) {\r\n          if(item.phone.indexOf(phone) !== -1) return true;\r\n          if(item.name.toLowerCase().indexOf(phone.toLowerCase()) !== -1) return true;\r\n          if(item.orderId.toString().indexOf(phone.toLowerCase()) !== -1) return true;\r\n          return false;\r\n        }\r\n        return true;\r\n      })\r\n    }\r\n    return data;\r\n  }\r\n  render() {\r\n    let loading = true;\r\n    let {selectedArea, selectedHub, selectedDriver, phone } = this.state;\r\n    let {locations, hubs, deliveryBoys, orders} = this.props;\r\n\r\n    let deliveryBoysData = deliveryBoys ? Array.from(deliveryBoys.values()) : [];\r\n    deliveryBoysData = deliveryBoysData.sort((a, b) => (a.name.localeCompare(b.name)));\r\n\r\n    let areas = [], subareas = [];\r\n    \r\n    if(locations) locations.forEach((hub, hubName) => {\r\n      hub.forEach((area, areaName) => {\r\n        if( (hubName === selectedHub) || (selectedHub === 'all') ) {\r\n          areas.push(areaName);\r\n        }\r\n        if( selectedArea.includes(areaName) || selectedArea.length === 0 ) {\r\n          subareas.concat(area);\r\n        }\r\n      });\r\n    });\r\n\r\n    areas = areas.sort((a, b) => a.localeCompare(b));\r\n\r\n    if(orders) {\r\n      loading = false;\r\n    }\r\n\r\n    let data = this.filterData();\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          loading?\r\n          <Loading /> :\r\n          <div>\r\n            <div \r\n              className=\"flex middle\"\r\n              style={{padding: 10}}\r\n            >\r\n              <div style={{marginRight: 20, width: 220}}>\r\n                <TextField\r\n                  value={phone}\r\n                  fullWidth\r\n                  label=\"Phone, Name, Crate, Order Id\"\r\n                  onChange={(e) => this.setState({phone: e.target.value})}\r\n                />\r\n              </div>\r\n\r\n              <div style={{marginRight: 20, width: 120}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"hub-filter\">Hub</InputLabel>\r\n                  <Select\r\n                    labelId=\"hub-filter\"\r\n                    style={{width: 100}}\r\n                    value={selectedHub}\r\n                    onChange={(e) => {\r\n                      let selectedHub = e.target.value;\r\n                      this.setState({selectedHub, selectedArea: 'all', selectedSubarea: 'all'})\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    {hubs.map(item => (\r\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                  </FormControl>\r\n              </div>\r\n              \r\n              <div style={{marginRight: 20, width: 450}}>\r\n                <FormControl style={{width: '100%'}}>\r\n                  <Autocomplete\r\n                    labelId=\"area-filter\"\r\n                    options={areas}\r\n                    // getOptionLabel={partner => partner.name}\r\n                    multiple={true}\r\n                    renderInput={(params) => <TextField {...params} label=\"Area\" />}\r\n                    onChange={(e, selectedArea) => {\r\n                      console.log(selectedArea);\r\n                      this.setState({selectedArea, selectedSubarea: 'all'})\r\n                    }}\r\n                  />\r\n                </FormControl>\r\n              </div>\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"driver-filter\">Assigned Driver</InputLabel>\r\n                  <Select\r\n                    labelId=\"driver-filter\"\r\n                    style={{width: 200}}\r\n                    value={selectedDriver || 'all'}\r\n                    onChange={(e, b) => {\r\n                      let selectedDriver = e.target.value;\r\n                      this.setState({selectedDriver});\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    <MenuItem value=\"none\">None</MenuItem>\r\n                    {deliveryBoysData.map(item => (\r\n                      <MenuItem value={item.id} key={`driver-${item.id}`}>{item.name}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    window.location.reload();\r\n                  }}\r\n                >\r\n                  Clear All Filters\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            \r\n            <AssignOrders \r\n              data={data}\r\n              exportData={this.exportData}\r\n              deliveryBoys={deliveryBoys}\r\n            />\r\n          </div>\r\n        }\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps\r\n)(OrderManagement);"],"sourceRoot":""}