[{"D:\\work\\delivery-react-app\\src\\index.js":"1","D:\\work\\delivery-react-app\\src\\reducers\\admin.reducers.js":"2","D:\\work\\delivery-react-app\\src\\reducers\\driver.reducers.js":"3","D:\\work\\delivery-react-app\\src\\App.js":"4","D:\\work\\delivery-react-app\\src\\containers\\Admin.jsx":"5","D:\\work\\delivery-react-app\\src\\containers\\Driver.jsx":"6","D:\\work\\delivery-react-app\\src\\constants\\index.js":"7","D:\\work\\delivery-react-app\\src\\components\\Loading.js":"8","D:\\work\\delivery-react-app\\src\\components\\AdminLogin.js":"9","D:\\work\\delivery-react-app\\src\\components\\AdminNavbar.js":"10","D:\\work\\delivery-react-app\\src\\components\\DriverNavbar.js":"11","D:\\work\\delivery-react-app\\src\\components\\DriverLogin.js":"12","D:\\work\\delivery-react-app\\src\\components\\OrderDeliveryForm.js":"13","D:\\work\\delivery-react-app\\src\\components\\ChooseOrder.js":"14","D:\\work\\delivery-react-app\\src\\api\\admin.js":"15","D:\\work\\delivery-react-app\\src\\actions\\admin.actions.js":"16","D:\\work\\delivery-react-app\\src\\components\\CustomerSheet.jsx":"17","D:\\work\\delivery-react-app\\src\\components\\ProductSheet.jsx":"18","D:\\work\\delivery-react-app\\src\\components\\OrderManagement.jsx":"19","D:\\work\\delivery-react-app\\src\\actions\\driver.actions.js":"20","D:\\work\\delivery-react-app\\src\\api\\driver.js":"21","D:\\work\\delivery-react-app\\src\\components\\WebCam.js":"22","D:\\work\\delivery-react-app\\src\\components\\DriverOrderTable.js":"23","D:\\work\\delivery-react-app\\src\\helpers\\exportCSV.js":"24","D:\\work\\delivery-react-app\\src\\components\\DeliveryInfo.js":"25","D:\\work\\delivery-react-app\\src\\helpers\\utils.js":"26","D:\\work\\delivery-react-app\\src\\components\\OrderDataTable.js":"27","D:\\work\\delivery-react-app\\src\\reportWebVitals.js":"28","D:\\work\\delivery-react-app\\src\\api\\misc.js":"29","D:\\work\\delivery-react-app\\src\\components\\AddReport.js":"30","D:\\work\\delivery-react-app\\src\\components\\ReportForm.js":"31","D:\\work\\delivery-react-app\\src\\trace\\Trace.js":"32","D:\\work\\delivery-react-app\\src\\trace\\Journey.js":"33","D:\\work\\delivery-react-app\\src\\trace\\header.js":"34","D:\\work\\delivery-react-app\\src\\trace\\Facts.js":"35","D:\\work\\delivery-react-app\\src\\trace\\Main.js":"36","D:\\work\\delivery-react-app\\src\\trace\\getDate.js":"37","D:\\work\\delivery-react-app\\src\\components\\PackOrders.js":"38","D:\\work\\delivery-react-app\\src\\components\\PackOrderForm.js":"39","D:\\work\\delivery-react-app\\src\\components\\LeftRightSwitch.js":"40","D:\\work\\delivery-react-app\\src\\helpers\\math.js":"41"},{"size":852,"mtime":1611732822757,"results":"42","hashOfConfig":"43"},{"size":8039,"mtime":1611749003277,"results":"44","hashOfConfig":"43"},{"size":5181,"mtime":1611749003283,"results":"45","hashOfConfig":"43"},{"size":1580,"mtime":1611747204565,"results":"46","hashOfConfig":"43"},{"size":3067,"mtime":1611747164934,"results":"47","hashOfConfig":"43"},{"size":1263,"mtime":1611554449286,"results":"48","hashOfConfig":"43"},{"size":365,"mtime":1611749003275,"results":"49","hashOfConfig":"43"},{"size":244,"mtime":1611554449223,"results":"50","hashOfConfig":"43"},{"size":2651,"mtime":1611747164934,"results":"51","hashOfConfig":"43"},{"size":5673,"mtime":1611749003266,"results":"52","hashOfConfig":"43"},{"size":2445,"mtime":1611749003269,"results":"53","hashOfConfig":"43"},{"size":2287,"mtime":1611749003269,"results":"54","hashOfConfig":"43"},{"size":14152,"mtime":1611554449223,"results":"55","hashOfConfig":"43"},{"size":8137,"mtime":1611749003266,"results":"56","hashOfConfig":"43"},{"size":1647,"mtime":1611749003264,"results":"57","hashOfConfig":"43"},{"size":506,"mtime":1611749003263,"results":"58","hashOfConfig":"43"},{"size":9975,"mtime":1611749003267,"results":"59","hashOfConfig":"43"},{"size":5843,"mtime":1611554449223,"results":"60","hashOfConfig":"43"},{"size":17599,"mtime":1611749003271,"results":"61","hashOfConfig":"43"},{"size":252,"mtime":1611554449130,"results":"62","hashOfConfig":"43"},{"size":1005,"mtime":1611554449146,"results":"63","hashOfConfig":"43"},{"size":2069,"mtime":1611554449271,"results":"64","hashOfConfig":"43"},{"size":2141,"mtime":1611554449208,"results":"65","hashOfConfig":"43"},{"size":493,"mtime":1611554449349,"results":"66","hashOfConfig":"43"},{"size":6377,"mtime":1611749003268,"results":"67","hashOfConfig":"43"},{"size":1735,"mtime":1611749003276,"results":"68","hashOfConfig":"43"},{"size":5320,"mtime":1611554449223,"results":"69","hashOfConfig":"43"},{"size":375,"mtime":1611554449364,"results":"70","hashOfConfig":"43"},{"size":532,"mtime":1611757574348,"results":"71","hashOfConfig":"43"},{"size":1488,"mtime":1611749003265,"results":"72","hashOfConfig":"43"},{"size":11028,"mtime":1611554449223,"results":"73","hashOfConfig":"43"},{"size":2000,"mtime":1611759832672,"results":"74","hashOfConfig":"43"},{"size":1083,"mtime":1611745947644,"results":"75","hashOfConfig":"43"},{"size":282,"mtime":1611732822771,"results":"76","hashOfConfig":"43"},{"size":1053,"mtime":1611738843434,"results":"77","hashOfConfig":"43"},{"size":1608,"mtime":1611847636892,"results":"78","hashOfConfig":"43"},{"size":454,"mtime":1611817197375,"results":"79","hashOfConfig":"43"},{"size":3986,"mtime":1611749003273,"results":"80","hashOfConfig":"43"},{"size":4821,"mtime":1611749003272,"results":"81","hashOfConfig":"43"},{"size":1456,"mtime":1611749003270,"results":"82","hashOfConfig":"43"},{"size":116,"mtime":1611747164934,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"1np1b",{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"86"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"86"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"86"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"86"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"86"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"86"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"86"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"86"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"D:\\work\\delivery-react-app\\src\\index.js",[],["176","177"],"D:\\work\\delivery-react-app\\src\\reducers\\admin.reducers.js",["178"],"import {UPDATE_ADMIN, UPDATE_ORDERS_DATA, UPDATE_ADMIN_DATA, UPDATE_ORDER_CRATE_DATA} from '../constants/index';\r\n\r\nimport {hasOnlyDairyProducts, hasNoDairy} from '../helpers/utils';\r\n\r\nlet admin = window.localStorage.getItem('admin');\r\nif(admin) {\r\n  admin = JSON.parse(admin);\r\n} else {\r\n  admin = undefined;\r\n}\r\n// console.log(admin);\r\nconst initialState = {\r\n  admin,\r\n  loadingOrderData: true\r\n}\r\n\r\nexport const setAdmin = (state = initialState, action = {}) => {\r\n  switch(action.type) {\r\n    case UPDATE_ADMIN:\r\n      let admin = action.payload;\r\n      window.localStorage.setItem('admin', JSON.stringify(admin));\r\n      return { ...state, admin}\r\n    case UPDATE_ADMIN_DATA:\r\n      // let {customers, areas, subareas, categories, hubs, orders} = action.payload;\r\n      return { \r\n        ...state,\r\n        ...action.payload\r\n      }\r\n\r\n    case UPDATE_ORDER_CRATE_DATA:\r\n      // let {customers, areas, subareas, categories, hubs, orders} = action.payload;\r\n      console.log(action.payload);\r\n      // return { \r\n      //   ...state,\r\n      //   ...action.payload\r\n      // }\r\n\r\n    case UPDATE_ORDERS_DATA:\r\n\r\n      let orders = action.payload;\r\n      let customers = new Map();\r\n      let productsCollection = new Map();\r\n      let locations = new Map();\r\n      let alreadyCreatedCratedToday = false;\r\n      /* \r\n      locations = {\r\n        \"Gurgaon\": {\r\n          \"Sector 69\": [\r\n            \"Tulip White\"\r\n          ]\r\n        },\r\n        \"South Delhi\": {\r\n\r\n        }\r\n      }\r\n      */\r\n\r\n      // prepare location data\r\n      orders.forEach(order => {\r\n        let { subarea, area, hub, crate_id } = order;\r\n        \r\n        if(crate_id) {\r\n          alreadyCreatedCratedToday = true;\r\n        }\r\n        if(locations.has(hub)) {\r\n          let hubAreas = locations.get(hub);\r\n          if(hubAreas.has(area)) {\r\n            let subareas = hubAreas.get(area);\r\n            if(!subareas.includes(subarea)) {\r\n              subareas.push(subarea);\r\n            }\r\n            hubAreas.set(area, subareas);\r\n            locations.set(hub, hubAreas);\r\n          } else {\r\n            let areaData = [subarea];\r\n            hubAreas.set(area, areaData);\r\n            locations.set(hub, hubAreas);\r\n          }\r\n        } else {\r\n          let hubAreas = new Map();\r\n          hubAreas.set(area, [subarea]);\r\n          locations.set(hub, hubAreas)\r\n        }\r\n      });\r\n\r\n      // console.log(locations);\r\n\r\n      let categories = [];\r\n      let hubs = [];\r\n      let areas = [];\r\n      let subareas = [];\r\n      let products = {};\r\n\r\n      // accumulate customer data\r\n      orders.forEach(order => {\r\n        let { \r\n          order_id, crate_id,\r\n          order_staus, order_type, TIMESTAMP, last_update_on,\r\n          crates, remark, small_boxes, large_boxes,\r\n          customer_id, customer_name, phone_number, \r\n          address_id, house_number, subarea, area, hub,\r\n          category, product, quantity,\r\n          package_size, package_type, product_package_id, product_id, \r\n          region_id, location_id, delivery_person_id,\r\n          driver_id, deliver_date, delivery_type, proof_img, complete_delivery, order_cancel_reason, boxes, milk_packets\r\n        } = order;\r\n\r\n        // if(order_id === 129779) {\r\n        //   console.log(order);\r\n        // }\r\n\r\n        // filter orders created after crate id is generated\r\n        if(alreadyCreatedCratedToday) {\r\n          if(!crate_id) {\r\n            return;\r\n          }\r\n        }\r\n\r\n        let productData = {\r\n          product,\r\n          product_id,\r\n          product_package_id,\r\n          package_size,\r\n          quantity,\r\n          category,\r\n          total: package_size * quantity,\r\n          unit: package_type\r\n        }\r\n        \r\n        let deliveryData = {\r\n          driver_id, deliver_date, delivery_type, proof_img, complete_delivery, order_cancel_reason, boxes, milk_packets\r\n        }\r\n        \r\n        if(categories.includes(category) === false) {\r\n          categories.push(category);\r\n        }\r\n        if(!(product_id in products)) {\r\n          products[product_id] = product;\r\n        }\r\n\r\n        if(customers.has(customer_id)) {\r\n          \r\n          let customer = customers.get(customer_id);\r\n          let {products} = customer;\r\n          \r\n          if(category in products) {\r\n            products[category].push(productData);\r\n          } else {\r\n            products[category] = [\r\n              productData\r\n            ]\r\n          }\r\n          \r\n          customer.products = products;\r\n          customer.delivery = deliveryData;\r\n          customer.delivered = deliveryData.deliver_date;\r\n        } else {\r\n          \r\n          // if(order_id === 129779) {\r\n          //   console.log(order);\r\n          // }\r\n          \r\n          if(areas.includes(area) === false) {\r\n            areas.push(area);\r\n          }\r\n          if(subareas.includes(subarea) === false) {\r\n            subareas.push(subarea);\r\n          }\r\n          if(hubs.includes(hub) === false) {\r\n            hubs.push(hub);\r\n          }\r\n\r\n          let customer = {\r\n            name: customer_name,\r\n            phone: phone_number,\r\n            order_id,\r\n            crate_id,\r\n            order_staus, order_type, TIMESTAMP,  last_update_on,\r\n            crates, remark, small_boxes, large_boxes,\r\n            address: {\r\n              address_id,\r\n              house_number, subarea,\r\n              area, hub,\r\n              region_id, location_id\r\n            },\r\n            products: {\r\n              [category]: [productData]\r\n            },\r\n            fnvProducts: [],\r\n            delivery_person_id,\r\n            delivery: deliveryData,\r\n            delivered: deliveryData.deliver_date\r\n          }\r\n          customers.set(customer_id, customer);\r\n        }\r\n      });\r\n\r\n      // create crate id for orders except onlyDairyProducts\r\n      let crateId = 1;\r\n      for(const customer of customers) {\r\n        const {products} = customer[1];\r\n        if(hasOnlyDairyProducts(products)) {\r\n          customer[1].onlyDairy = true;\r\n        } else {\r\n          customer[1].onlyDairy = false;\r\n          customer[1].crateId = crateId;\r\n          crateId++;\r\n        }\r\n        \r\n        if(hasNoDairy(products)) {\r\n          customer[1].hasNoDairy = true;\r\n        } else {\r\n          customer[1].hasNoDairy = false;\r\n        }  \r\n      }\r\n      \r\n      // create crate id for orders that has onlyDairyProducts\r\n      for(const customer of customers) {\r\n        const {products} = customer[1];\r\n        if(hasOnlyDairyProducts(products)) {\r\n          customer[1].crateId = crateId;\r\n          crateId++;\r\n        }\r\n      }\r\n\r\n      orders.forEach(order => {\r\n        let { \r\n          customer_id, \r\n          category, product, quantity,\r\n          package_size, package_type, product_id\r\n        } = order;\r\n\r\n        // if(category !== 'Dairy') {\r\n          \r\n          let crateData = {\r\n            quantity,\r\n            total: package_size * quantity,\r\n            crateId: customers.get(customer_id).crateId,\r\n            crate_id: customers.get(customer_id).crate_id\r\n          }\r\n          if(productsCollection.has(product_id)) {\r\n            let productValue = productsCollection.get(product_id);\r\n            let {crates} = productValue;\r\n            crates.push(crateData);\r\n\r\n            productValue.crates = crates;\r\n          } else {\r\n            let productData = {\r\n              package_size,\r\n              product_id,\r\n              product,\r\n              category,\r\n              unit: package_type,\r\n              crates: [crateData]\r\n            }\r\n            productsCollection.set(product_id, productData);\r\n          }\r\n        // }\r\n      })\r\n      \r\n      return {\r\n        ...state, \r\n        alreadyCreatedCratedToday, \r\n        loadingOrderData: false, \r\n        customers, \r\n        locations, \r\n        productsCollection, \r\n        products, \r\n        areas, \r\n        subareas, \r\n        categories, \r\n        hubs, \r\n        orders\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}","D:\\work\\delivery-react-app\\src\\reducers\\driver.reducers.js",["179"],"import {UPDATE_DRIVER, UPDATE_ORDERS} from '../constants/index';\r\n\r\nlet driver = window.localStorage.getItem('driver');\r\nif(driver) {\r\n  driver = JSON.parse(driver);\r\n} else {\r\n  driver = undefined;\r\n}\r\nconst initialState = {\r\n  driver\r\n}\r\n\r\nfunction hasOnlyDairyProducts(products) {\r\n  if('Dairy' in products && Object.entries(products).length === 1) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction hasNoDairy(products) {\r\n  if(!('Dairy' in products)) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport const setDriver = (state = initialState, action = {}) => {\r\n  switch(action.type) {\r\n    case UPDATE_DRIVER:\r\n      let driver = action.payload;\r\n      window.localStorage.setItem('driver', JSON.stringify(driver));\r\n      return { ...state, driver}\r\n\r\n    case UPDATE_ORDERS:\r\n\r\n      let orders = action.payload;\r\n      let customers = new Map();\r\n      let productsCollection = new Map();\r\n      let locations = new Map();\r\n      /* \r\n      locations = {\r\n        \"Gurgaon\": {\r\n          \"Sector 69\": [\r\n            \"Tulip White\"\r\n          ]\r\n        },\r\n        \"South Delhi\": {\r\n\r\n        }\r\n      }\r\n      */\r\n      orders.forEach(order => {\r\n        let { subarea, area, hub } = order;\r\n        if(locations.has(hub)) {\r\n          let hubAreas = locations.get(hub);\r\n          if(hubAreas.has(area)) {\r\n            let subareas = hubAreas.get(area);\r\n            if(!subareas.includes(subarea)) {\r\n              subareas.push(subarea);\r\n            }\r\n            hubAreas.set(area, subareas);\r\n            locations.set(hub, hubAreas);\r\n          } else {\r\n            let areaData = [subarea];\r\n            hubAreas.set(area, areaData);\r\n            locations.set(hub, hubAreas);\r\n          }\r\n        } else {\r\n          let hubAreas = new Map();\r\n          hubAreas.set(area, [subarea]);\r\n          locations.set(hub, hubAreas)\r\n        }\r\n      });\r\n\r\n      // console.log(locations);\r\n\r\n      let categories = [];\r\n      let hubs = [];\r\n      let areas = [];\r\n      let subareas = [];\r\n      let products = {};\r\n\r\n      orders.forEach(order => {\r\n        let { \r\n          order_id, crate_id,\r\n          customer_id, customer_name, phone_number, \r\n          address_id, house_number, subarea, area, hub,\r\n          category, product, quantity,\r\n          package_size, package_type, product_package_id, product_id, \r\n          region_id, location_id, delivery_person_id,\r\n          driver_id, deliver_date, delivery_type, proof_img, complete_delivery, order_cancel_reason, boxes, milk_packets\r\n        } = order;\r\n\r\n        if(delivery_person_id) {\r\n          // console.log(order);\r\n        }\r\n        let productData = {\r\n          product,\r\n          product_id,\r\n          product_package_id,\r\n          package_size,\r\n          quantity,\r\n          total: package_size * quantity,\r\n          unit: package_type\r\n        }\r\n        let deliveryData = {\r\n          driver_id, deliver_date, delivery_type, proof_img, complete_delivery, order_cancel_reason, boxes, milk_packets\r\n        }\r\n        \r\n        if(categories.includes(category) === false) {\r\n          categories.push(category);\r\n        }\r\n        if(!(product_id in products)) {\r\n          products[product_id] = product;\r\n        }\r\n\r\n        if(customers.has(customer_id)) {\r\n          let customer = customers.get(customer_id);\r\n          let {products} = customer;\r\n          \r\n          if(category in products) {\r\n            products[category].push(productData);\r\n          } else {\r\n            products[category] = [\r\n              productData\r\n            ]\r\n          }\r\n\r\n          customer.products = products;\r\n          customer.delivery = deliveryData;\r\n          customer.delivered = deliveryData.deliver_date;\r\n        } else {\r\n          \r\n          if(areas.includes(area) === false) {\r\n            areas.push(area);\r\n          }\r\n          if(subareas.includes(subarea) === false) {\r\n            subareas.push(subarea);\r\n          }\r\n          if(hubs.includes(hub) === false) {\r\n            hubs.push(hub);\r\n          }\r\n\r\n          let customer = {\r\n            name: customer_name,\r\n            phone: phone_number,\r\n            order_id,\r\n            crate_id,\r\n            address: {\r\n              address_id,\r\n              house_number, subarea,\r\n              area, hub,\r\n              region_id, location_id\r\n            },\r\n            products: {\r\n              [category]: [productData]\r\n            },\r\n            delivery_person_id,\r\n            delivery: deliveryData,\r\n            delivered: deliveryData.deliver_date\r\n          }\r\n          customers.set(customer_id, customer);\r\n        }\r\n      });\r\n\r\n      for(const customer of customers) {\r\n        const {products} = customer[1];\r\n        if(hasOnlyDairyProducts(products)) {\r\n          customer[1].onlyDairy = true;\r\n        } else {\r\n          customer[1].onlyDairy = false;\r\n        }\r\n        \r\n        if(hasNoDairy(products)) {\r\n          customer[1].hasNoDairy = true;\r\n        } else {\r\n          customer[1].onlyDairy = false;\r\n        }\r\n      }\r\n      \r\n      return {...state, customers, locations,  areas, subareas, hubs, orders};\r\n    default:\r\n      return state;\r\n  }\r\n}","D:\\work\\delivery-react-app\\src\\App.js",[],"D:\\work\\delivery-react-app\\src\\containers\\Admin.jsx",[],"D:\\work\\delivery-react-app\\src\\containers\\Driver.jsx",[],"D:\\work\\delivery-react-app\\src\\constants\\index.js",[],"D:\\work\\delivery-react-app\\src\\components\\Loading.js",[],"D:\\work\\delivery-react-app\\src\\components\\AdminLogin.js",[],"D:\\work\\delivery-react-app\\src\\components\\AdminNavbar.js",[],"D:\\work\\delivery-react-app\\src\\components\\DriverNavbar.js",[],"D:\\work\\delivery-react-app\\src\\components\\DriverLogin.js",[],"D:\\work\\delivery-react-app\\src\\components\\OrderDeliveryForm.js",[],"D:\\work\\delivery-react-app\\src\\components\\ChooseOrder.js",[],"D:\\work\\delivery-react-app\\src\\api\\admin.js",[],"D:\\work\\delivery-react-app\\src\\actions\\admin.actions.js",[],"D:\\work\\delivery-react-app\\src\\components\\CustomerSheet.jsx",[],"D:\\work\\delivery-react-app\\src\\components\\ProductSheet.jsx",[],"D:\\work\\delivery-react-app\\src\\components\\OrderManagement.jsx",["180"],"import React, { Component, useCallback, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport DownloadIcon from '@material-ui/icons/CloudDownload';\r\nimport exportCSV from '../helpers/exportCSV';\r\n\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nimport Loading from './Loading';\r\nimport OrderDataTable from './OrderDataTable';\r\nimport {assignDrivers, getAllOrders} from '../api/admin';\r\nimport DeliveryInfo from \"./DeliveryInfo\";\r\nimport {updateOrdersData} from '../actions/admin.actions';\r\n\r\nfunction mapStateToProps(state) {\r\n  let {setAdmin} = state;\r\n  return {\r\n    ...setAdmin\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onUpdateOrdersData: (data) => dispatch(updateOrdersData(data)),\r\n  };\r\n}\r\n\r\nclass OrderManagement extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      phone: \"\",\r\n      selectedArea: [],\r\n      selectedSubarea: 'all',\r\n      selectedHub: 'all',\r\n      selectedDriver: 'all',\r\n      showWithoutDairy: false,\r\n      hiddenAddress: false,\r\n      selectedRow: []\r\n    }\r\n  }\r\n  hideAddress = () => this.setState({hiddenAddress: true})\r\n  \r\n  exportData = () => {\r\n    let {customers, deliveryBoys } = this.props;\r\n    let data = Array.from(customers.values());\r\n\r\n    let rows = [\r\n      ['order_id', 'Crate', 'Name', 'Phone', 'Hub', 'Region', 'Locality', 'House', 'Order Type', 'Gable Top', 'Milk Packets', 'Paneer', 'Driver', 'Delivered By'],\r\n    ];\r\n    data.forEach(item => {\r\n      const {order_id, crate_id, name, phone, address, onlyDairy, hasNoDairy, products, delivery_person_id, delivery } = item;\r\n      const {hub, area, subarea, house_number} = address;\r\n      const {driver_id, deliver_date} = delivery;\r\n      let order_type;\r\n      \r\n      if(onlyDairy) order_type = 'Dairy'\r\n      else if(hasNoDairy) order_type = 'Grocery'\r\n      else order_type = 'Dairy + Grocery';\r\n\r\n      let gable_top = 0, milk_packets = 0, paneer = 0, driverName = '', deliveredBy = '';\r\n      if('Dairy' in products) {\r\n        let dairyProducts = products['Dairy'];\r\n        dairyProducts.forEach(item => {\r\n          if(item.product_id === 811) gable_top += item.quantity;\r\n          if(item.product_id === 1) milk_packets += item.quantity;\r\n          if(item.product_id === 225) paneer += item.total;\r\n        });\r\n      }\r\n\r\n      if(delivery_person_id) {\r\n        let driver = deliveryBoys.get(delivery_person_id);\r\n        if(driver) driverName = driver.name;\r\n      }\r\n\r\n      if(driver_id && deliver_date) {\r\n        let driver = deliveryBoys.get(driver_id);\r\n        if(driver) deliveredBy = driver.name;\r\n      }\r\n\r\n      let row = [\r\n        order_id,\r\n        crate_id,\r\n        name, \r\n        phone,\r\n        hub,\r\n        area,\r\n        subarea,\r\n        `\"${house_number}\"`,\r\n        order_type,\r\n        gable_top,\r\n        milk_packets,\r\n        paneer,\r\n        driverName,\r\n        deliveredBy\r\n      ];\r\n      rows.push(row);\r\n    });\r\n    exportCSV(rows, `Delivery Sheet - ${new Date().toLocaleDateString()}.csv`);\r\n  }\r\n  render() {\r\n    let loading = true;\r\n    let {selectedArea, selectedHub, selectedSubarea, selectedDriver, orderType, phone, showDelivered } = this.state;\r\n    let {customers, locations, hubs, deliveryBoys} = this.props;\r\n    let deliveryBoysData = deliveryBoys ? Array.from(deliveryBoys.values()) : [];\r\n    deliveryBoysData = deliveryBoysData.sort((a, b) => (a.name.localeCompare(b.name)));\r\n\r\n    /* \r\n      locations = {\r\n        \"Gurgaon\": {\r\n          \"Sector 69\": [\r\n            \"Tulip White\"\r\n          ]\r\n        },\r\n        \"South Delhi\": {\r\n\r\n        }\r\n      }\r\n    */\r\n    // console.log(locations);\r\n    let areas = [], subareas = [];\r\n    \r\n    if(locations) locations.forEach((hub, hubName) => {\r\n      hub.forEach((area, areaName) => {\r\n        // if valid, insert into areas\r\n        if( (hubName === selectedHub) || (selectedHub === 'all') ) {\r\n          areas.push(areaName);\r\n        }\r\n        \r\n        if( selectedArea.includes(areaName) || selectedArea.length === 0 ) {\r\n          subareas.concat(area);\r\n        }\r\n      });\r\n    });\r\n    areas = areas.sort((a, b) => a.localeCompare(b));\r\n\r\n    // if(selectedHub !== 'all') {\r\n    //   let filteredAreas = locations.get(selectedHub);\r\n    //   areas = Array.from(filteredAreas.keys());\r\n\r\n    //   areas = areas.sort((a, b) => a.localeCompare(b));\r\n      \r\n    //   let subareasCollection =  Array.from(filteredAreas.values());\r\n    //   // selectedArea !== 'all' ? [filteredAreas.get(selectedArea)] : Array.from(filteredAreas.values());\r\n    //   if(selectedArea && selectedArea.length) {\r\n    //     selectedArea.forEach(area => {\r\n    //       subareasCollection.concat(filteredAreas.get(area));\r\n    //     })\r\n    //   }\r\n    //   subareas = [];\r\n    //   subareasCollection.forEach(areaSubareas => {\r\n    //     areaSubareas.forEach(subarea => subareas.push(subarea));\r\n    //   });\r\n    //   subareas = subareas.sort((a, b) => a.localeCompare(b));\r\n    // }\r\n\r\n    // if(selectedArea && selectedArea.length) {\r\n      \r\n    //   let filteredAreas = new Map();\r\n    //   Array.from(locations.keys()).forEach(hub => {\r\n    //     if(locations.get(hub).has(selectedArea)) {\r\n    //       filteredAreas = locations.get(hub);\r\n    //     }\r\n    //   })\r\n\r\n    //   let subareasCollection = [filteredAreas.get(selectedArea)]\r\n    //   subareas = [];\r\n    //   subareasCollection.forEach(areaSubareas => {\r\n    //     areaSubareas.forEach(subarea => subareas.push(subarea));\r\n    //   });\r\n    //   subareas = subareas.sort((a, b) => a.localeCompare(b));\r\n    // }\r\n    \r\n    let data = [];\r\n    if(customers) {\r\n      loading = false\r\n      data = Array.from(customers.values());\r\n\r\n      /* \r\n      Clear all Filters\r\n          phone: \"\",\r\n          selectedArea: [],\r\n          selectedSubarea: 'all',\r\n          selectedHub: 'all',\r\n          selectedDriver: 'all',\r\n          showWithoutDairy: false,\r\n          showDelivered: false,\r\n          orderType: 'all'\r\n       */\r\n      data = data.filter((item) => {\r\n        if(selectedHub !== 'all') {\r\n          if(item.address.hub !== selectedHub) return false;\r\n        }\r\n        if(selectedArea.length) {\r\n          if(!selectedArea.includes(item.address.area)) return false;\r\n        }\r\n        // if(selectedSubarea !== 'all') {\r\n        //   if(item.address.subarea !== selectedSubarea) return false;\r\n        // }\r\n        if(selectedDriver !== 'all') {\r\n          if(selectedDriver === 'none') {\r\n            if(item.delivery_person_id !== null) return false;\r\n          } else if(item.delivery_person_id !== selectedDriver) return false;\r\n        }\r\n        if(showDelivered) {\r\n          if(item.delivery.deliver_date) return true;\r\n          return false;\r\n        }\r\n        if(orderType) {\r\n          console.log(orderType)\r\n          switch (orderType) {\r\n            case 'all':\r\n              return true;\r\n            case 'dairy':\r\n              return item.onlyDairy;\r\n            case 'grocery':\r\n              return item.hasNoDairy;\r\n            case 'both':\r\n              return item.hasNoDairy === false && item.onlyDairy === false;\r\n            default:\r\n              return true;\r\n          }\r\n        }\r\n        if(phone) {\r\n          if(item.phone.indexOf(phone) !== -1) return true;\r\n          if(item.name.toLowerCase().indexOf(phone.toLowerCase()) !== -1) return true;\r\n          if(item.order_id.toString().indexOf(phone.toLowerCase()) !== -1) return true;\r\n          return false;\r\n        }\r\n        return true;\r\n      })\r\n\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          loading?\r\n          <Loading /> :\r\n          <div>\r\n            <div \r\n              className=\"flex middle\"\r\n              style={{padding: 10}}\r\n            >\r\n              <div style={{marginRight: 20, width: 220}}>\r\n                <TextField\r\n                  value={phone}\r\n                  fullWidth\r\n                  label=\"Phone or Name or Order Id\"\r\n                  onChange={(e) => this.setState({phone: e.target.value})}\r\n                />\r\n              </div>\r\n\r\n              <div style={{marginRight: 20, width: 120}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"hub-filter\">Hub</InputLabel>\r\n                  <Select\r\n                    labelId=\"hub-filter\"\r\n                    style={{width: 100}}\r\n                    value={selectedHub}\r\n                    onChange={(e) => {\r\n                      let selectedHub = e.target.value;\r\n                      this.setState({selectedHub, selectedArea: 'all', selectedSubarea: 'all'})\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    {hubs.map(item => (\r\n                      <MenuItem value={item} key={item}>{item}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                  </FormControl>\r\n              </div>\r\n              \r\n              <div style={{marginRight: 20, width: 250}}>\r\n                <FormControl style={{width: '100%'}}>\r\n                  <Autocomplete\r\n                    labelId=\"area-filter\"\r\n                    options={areas}\r\n                    // getOptionLabel={partner => partner.name}\r\n                    multiple={true}\r\n                    renderInput={(params) => <TextField {...params} label=\"Area\" />}\r\n                    onChange={(e, selectedArea) => {\r\n                      console.log(selectedArea);\r\n                      this.setState({selectedArea, selectedSubarea: 'all'})\r\n                    }}\r\n                  />\r\n                </FormControl>\r\n              </div>\r\n\r\n              \r\n              {/* <div style={{marginRight: 20, width: 180}}>\r\n                <FormControl style={{width: '100%'}}>\r\n                  <Autocomplete\r\n                    labelId=\"area-filter\"\r\n                    options={subareas}\r\n                    // getOptionLabel={partner => partner.name}\r\n                    renderInput={(params) => <TextField {...params} label=\"Sub-Areas\" />}\r\n                    onChange={(e, selectedSubarea) => {\r\n                      this.setState({ selectedSubarea: selectedSubarea || 'all'})\r\n                    }}\r\n                  />\r\n                  </FormControl>\r\n              </div> */}\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"driver-filter\">Assigned Driver</InputLabel>\r\n                  <Select\r\n                    labelId=\"driver-filter\"\r\n                    style={{width: 200}}\r\n                    value={selectedDriver || 'all'}\r\n                    onChange={(e, b) => {\r\n                      let selectedDriver = e.target.value;\r\n                      this.setState({selectedDriver});\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    <MenuItem value=\"none\">None</MenuItem>\r\n                    {deliveryBoysData.map(item => (\r\n                      <MenuItem value={item.id} key={`driver-${item.id}`}>{item.name}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch\r\n                      checked={showDelivered}\r\n                      onChange={(e, showDelivered) => this.setState({showDelivered})}\r\n                      color=\"primary\"\r\n                    />\r\n                  }\r\n                  label=\"Only Delivered\"\r\n                />\r\n              </div>\r\n\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <FormControl>\r\n                  <InputLabel id=\"order-type-filter\">Order Type</InputLabel>\r\n                  <Select\r\n                    labelId=\"order-type-filter\"\r\n                    style={{width: 200}}\r\n                    onChange={(e) => {\r\n                      this.setState({orderType: e.target.value});\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"all\">All</MenuItem>\r\n                    <MenuItem value=\"dairy\">Dairy</MenuItem>\r\n                    <MenuItem value=\"grocery\">Grocery</MenuItem>\r\n                    <MenuItem value=\"both\">Dairy + Grocery</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n\r\n              <div style={{marginRight: 20}}>\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    window.location.reload();\r\n                  }}\r\n                >\r\n                  Clear All Filters\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            \r\n            <AssignOrders \r\n              data={data}\r\n              exportData={this.exportData}\r\n              deliveryBoys={deliveryBoys}\r\n            />\r\n          </div>\r\n        }\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst AssignOrders = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(\r\n  (props) => {\r\n  const {data, deliveryBoys, onUpdateOrdersData} = props;\r\n\r\n  let deliveryBoysData = Array.from(deliveryBoys.values());\r\n  deliveryBoysData = deliveryBoysData.sort((a, b) => (a.name.localeCompare(b.name)));\r\n  \r\n  let [selectedRows, setSelectedRows] = useState([]);\r\n  const [selectedCustomer, setSelectedCustomer] = useState(false);\r\n\r\n  const onSelectCustomer = useCallback((selectedCustomer) => {\r\n    setSelectedCustomer(selectedCustomer);\r\n  }, []);\r\n  \r\n  const changeSelection = useCallback(({ allSelected, selectedCount, selectedRows }) => {\r\n    setSelectedRows(selectedRows)\r\n  }, []);\r\n\r\n  const updateDriver = (e) => {\r\n    let order_ids = selectedRows.map(item => item.order_id);\r\n    let driver = e.target.value;\r\n    const data = {\r\n      order_ids, driver\r\n    }\r\n    assignDrivers(data)\r\n    .then(res => {\r\n      getAllOrders()\r\n      .then(res => {\r\n        let orders = res.data;\r\n        onUpdateOrdersData(orders);\r\n      });\r\n      setSelectedRows([]);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div id=\"assign-orders\">\r\n      <Divider />\r\n      <div className=\"flex right middle\">\r\n        <div className=\"p-10\">\r\n          {\r\n            data.length \r\n          } Rows Filtered\r\n        </div>\r\n        <div className=\"p-10\">\r\n          {\r\n            selectedRows.length \r\n          } Rows Selected\r\n        </div>\r\n        <div className=\"p-10\">\r\n          <div>\r\n            <FormControl variant=\"outlined\">\r\n              <InputLabel id=\"driver-filter\">Select Driver</InputLabel>\r\n              <Select\r\n                labelId=\"driver-filter\"\r\n                style={{width: 200}}\r\n                disabled={selectedRows.length < 1}\r\n                onChange={updateDriver}\r\n              >\r\n                <MenuItem value=\"null\">None</MenuItem>\r\n                {deliveryBoysData.map(item => (\r\n                  <MenuItem value={item.id} key={`driver-${item.id}`}>{item.name}</MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n        </div>\r\n        <div className=\"p-10\">\r\n          <Button \r\n            startIcon={<DownloadIcon />}\r\n            color=\"secondary\"\r\n            variant=\"outlined\"\r\n            onClick={props.exportData}\r\n            // disabled={true}\r\n          >\r\n            Download Excel\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <DeliveryInfo \r\n        customer={selectedCustomer}\r\n        setSelectedCustomer={setSelectedCustomer}\r\n      />\r\n      <OrderDataTable\r\n        data={data}\r\n        onSelectionChange={changeSelection}\r\n        onRowSelect={onSelectCustomer}\r\n        deliveryBoys={deliveryBoys}\r\n      />\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps\r\n)(OrderManagement);","D:\\work\\delivery-react-app\\src\\actions\\driver.actions.js",[],"D:\\work\\delivery-react-app\\src\\api\\driver.js",[],"D:\\work\\delivery-react-app\\src\\components\\WebCam.js",[],"D:\\work\\delivery-react-app\\src\\components\\DriverOrderTable.js",[],"D:\\work\\delivery-react-app\\src\\helpers\\exportCSV.js",[],"D:\\work\\delivery-react-app\\src\\components\\DeliveryInfo.js",["181"],"import React from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Card from '@material-ui/core/Card';\r\nimport Divider from '@material-ui/core/Divider';\r\n// import moment from 'moment';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction mapStateToProps(state) {\r\n  let {setAdmin} = state;\r\n  return {\r\n    ...setAdmin\r\n  };\r\n}\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\n\r\nclass OrderDeliveryForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ...props\r\n    }\r\n  }\r\n  Review = () => {\r\n    \r\n    let {customer, deliveryBoys} = this.props;\r\n    console.log(customer);\r\n    const {driver_id, deliver_date, delivery_type, proof_img, complete_delivery, order_cancel_reason, boxes, milk_packets} = customer.delivery;\r\n\r\n    let driver = deliveryBoys.get(driver_id);\r\n\r\n    function mapDeliveryType(delivery_type) {\r\n      switch (delivery_type) {\r\n        \r\n        case \"in_hand\":\r\n          return \"In Hand Delivery - कस्टमर के हाथ में डिलीवरी की\"\r\n        case \"doorstep\":\r\n          return \"Doorstep Delivery - घर के गेट के बहार आर्डर रखा\"\r\n        case \"society_guard\":\r\n          return \"Handed over to society guard - सोसाइटी गार्ड के पास आर्डर छोड़ा\"\r\n        case \"tower_guard\":\r\n          return \"Handed over to tower guard - टावर गार्ड के पास आर्डर छोड़ा\"\r\n        case \"order_cancelled\":\r\n          return \"Order Cancelled - आर्डर कैंसिल\"\r\n        default:\r\n          return <span style={{color: 'red'}}>Select Delivery Type - डिलीवरी कहाँ करी</span>;\r\n      }\r\n    }\r\n    function mapCompleteDelivery(complete_delivery) {\r\n      switch (complete_delivery) {\r\n        \r\n        case \"yes\":\r\n          return \"Yes - हाँ, मैंने पूरा आर्डर डिलीवर किया\"\r\n        case \"no\":\r\n          return \"No - नहीं,  पूरा आर्डर डिलीवर नहीं हुआ है\"\r\n        default:\r\n          return <span style={{color: 'red'}}>Complete Order Delivered? - क्या आपने पूरा आर्डर डिलीवर किया?</span>;\r\n      }\r\n    }\r\n    return (\r\n      <div className=\"pv-10\">\r\n        \r\n        {\r\n        customer.delivery.deliver_date ?\r\n        <Card variant=\"outlined\">\r\n          <div className=\"p-10\">\r\n            <Typography variant=\"body\">Delivered By</Typography>\r\n            <Typography variant=\"h6\">\r\n              {driver.name}\r\n            </Typography>\r\n          </div>\r\n          <Divider />\r\n          <div className=\"p-10\">\r\n            <Typography variant=\"body\">Delivered On</Typography>\r\n            <Typography variant=\"h6\">\r\n              {new Date(deliver_date).toDateString()}\r\n            </Typography>\r\n          </div>\r\n          <Divider />\r\n          <div className=\"p-10\">\r\n              <Typography variant=\"body\">Delivery Type - डिलीवरी कहाँ करी</Typography>\r\n              <Typography variant=\"h6\">\r\n                {mapDeliveryType(delivery_type)}\r\n              </Typography>\r\n          </div>\r\n          <Divider />\r\n          <div className=\"p-10\">\r\n            <Typography variant=\"body\">Delivery Photo</Typography>\r\n            {\r\n              proof_img ?\r\n              <div>\r\n                <img alt=\"order\" src={proof_img} width={300} /> \r\n              </div> :\r\n              <Typography variant=\"h6\"><span style={{color: 'red'}}>No Picture taken</span></Typography>\r\n            }\r\n          </div>\r\n          <Divider />\r\n          <div className=\"p-10\">\r\n          <Typography variant=\"body\">Complete Order Delivered? - क्या पूरा आर्डर डिलीवर किया?</Typography>\r\n            <Typography variant=\"h6\">\r\n              {mapCompleteDelivery(complete_delivery)}\r\n            </Typography>\r\n          </div>\r\n          <Divider />\r\n          <div className=\"p-10\">\r\n          <Typography variant=\"body\">Boxes - कितने डब्बे डिलीवर करे</Typography>\r\n            <Typography variant=\"h6\">{boxes}</Typography>\r\n          </div>\r\n          <Divider />\r\n          <div className=\"p-10\">\r\n          <Typography variant=\"body\">Milk Packets - कितने दूध के पैकेट डिलीवर करे</Typography>\r\n            <Typography variant=\"h6\">{milk_packets}</Typography>\r\n          </div>\r\n        </Card> :\r\n        \r\n          <Typography variant=\"h3\" style={{color: 'red'}} >\r\n            Not Delivered yet\r\n          </Typography>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n  render() {\r\n    \r\n    let {customer} = this.props;\r\n    \r\n    return (\r\n      <div >\r\n        {customer && <Dialog \r\n          fullScreen \r\n          open={true}\r\n          TransitionComponent={Transition}\r\n        >\r\n          <AppBar\r\n            position=\"fixed\"\r\n            color=\"default\"\r\n          >\r\n            <Toolbar>\r\n              <IconButton \r\n                edge=\"start\" \r\n                color=\"inherit\" \r\n                onClick={() => {\r\n                  this.props.setSelectedCustomer(false);\r\n                }} \r\n                aria-label=\"close\"\r\n              >\r\n                <CloseIcon />\r\n              </IconButton>\r\n              <Typography variant=\"h6\" >\r\n                {customer.name}\r\n              </Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n          <div style={{margin: '60px 10px 20px 10px', padding: '30px 10px'}}>\r\n            <Typography variant=\"h4\" >\r\n              Delivery Information\r\n            </Typography>\r\n            <Divider />\r\n            <this.Review />\r\n          </div>\r\n        </Dialog>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps\r\n)(OrderDeliveryForm);\r\n","D:\\work\\delivery-react-app\\src\\helpers\\utils.js",[],"D:\\work\\delivery-react-app\\src\\components\\OrderDataTable.js",[],"D:\\work\\delivery-react-app\\src\\reportWebVitals.js",[],["182","183"],"D:\\work\\delivery-react-app\\src\\api\\misc.js",[],"D:\\work\\delivery-react-app\\src\\components\\AddReport.js",["184"],"import { Box, Typography } from '@material-ui/core';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {getReport} from '../api/misc';\r\nimport {addReport} from '../api/admin';\r\nimport ReportForm from './ReportForm';\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n\r\n  };\r\n}\r\n\r\nclass AddReport extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      report: null,\r\n      loading: false\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    getReport()\r\n    .then(res => {\r\n      console.log(res.data);\r\n      this.setState({\r\n        report: res.data\r\n      });\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n    })\r\n  }\r\n  onSubmit = (data) => {\r\n    this.setState({\r\n      loading: true\r\n    })\r\n    addReport(data)\r\n    .then(res => {\r\n      console.log(res);\r\n      this.setState({\r\n        loading: false\r\n      })\r\n      alert('Done');\r\n    })\r\n    .catch(err => {\r\n      if(err.response && err.response.status === 400) {\r\n        alert(err.response.data)\r\n      }\r\n      console.log(err);\r\n      this.setState({\r\n        loading: false\r\n      })\r\n    })\r\n  }\r\n  render() {\r\n    const {loading, report} = this.state;\r\n    if(report) {\r\n      // alert(\"Already a report for today\");\r\n    }\r\n    return (\r\n      <div >\r\n        <Box m={1}>\r\n          <ReportForm onSubmit={this.onSubmit} loading={loading} />\r\n        </Box>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n)(AddReport);","D:\\work\\delivery-react-app\\src\\components\\ReportForm.js",[],"D:\\work\\delivery-react-app\\src\\trace\\Trace.js",["185","186","187"],"import React , {useState , useEffect} from \"react\";\r\nimport \"./trace.scss\";\r\nimport Header from \"./header.js\";\r\nimport {location ,search} from \"react-router\";\r\nimport Main from \"./Main.js\";\r\nimport moment from \"moment\";\r\nimport Journey from \"./Journey.js\";\r\nimport Facts from \"./Facts.js\";\r\nimport GetDate from \"./getDate.js\";\r\nimport {getReport} from \"../api/misc.js\";\r\nimport Loading from \"../components/Loading.js\";\r\n\r\nexport default function Trace({ location }) {\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [isA2, setIsA2] = useState(true);\r\n  const [data ,setData] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [load ,setLoad] = useState(false);\r\n\r\n  useEffect(() =>{\r\n    console.log(load);\r\n  },[load])\r\n  useEffect(() => {\r\n    let {search} = location;\r\n    search = new URLSearchParams(search);\r\n    const reportDate = search.get('report_date');\r\n    if(!reportDate)\r\n    return\r\n    const date = new Date(reportDate);\r\n    \r\n    const type = search.get('milk_type');\r\n    \r\n    \r\n    setStartDate(date);\r\n    setIsA2(type === \"a2\" ? true : false);\r\n  }, [location]);\r\n\r\n  useEffect(() => {\r\n  \r\n    async function getData() {\r\n      try {\r\n        setLoading(true);\r\n        const response = await getReport(\"a2\" , startDate);\r\n        setData(response.data);\r\n        setLoading(false);\r\n      }\r\n      catch (err) {\r\n        console.log(err);\r\n        setData(null);\r\n        setLoading(false);\r\n      }\r\n    }\r\n    getData();\r\n  }, [startDate, isA2]);\r\n\r\n  return (\r\n    <div className=\"trace\">\r\n      <Header />\r\n      <GetDate startDate = {startDate} setStartDate ={setStartDate} isA2 = {isA2} setIsA2 = {setIsA2}/>\r\n      {loading && <Loading />}\r\n      {!data && !loading && <p>Record Not Found</p>}\r\n      <Main data= {data} load = {load} setLoad = {setLoad} />\r\n      {data && load &&\r\n        <>\r\n          \r\n          <Journey data = {data} />\r\n          <Facts data= {data}  />\r\n        </>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n","D:\\work\\delivery-react-app\\src\\trace\\Journey.js",[],"D:\\work\\delivery-react-app\\src\\trace\\header.js",[],"D:\\work\\delivery-react-app\\src\\trace\\Facts.js",["188"],"import  React , { useEffect } from \"react\";\r\nimport \"./facts.scss\";\r\n\r\nimport milkbox from \"./icons/milkbox.svg\";\r\n\r\nexport default function Facts( {data} ) {\r\n\r\n   \r\n   \r\n  return (\r\n    <div className=\"facts\">\r\n      <img src={milkbox} className=\"Milk\" alt=\"milkboxs\" />\r\n    {data &&<button className=\"download-btn\" onClick = {() => window.open(data.pdf_url)}> Download Full Report</button>}\r\n    { data&& \r\n      <div className=\"cards\">\r\n        <div className=\"section1\">\r\n          <div className=\"f1\">\r\n    \r\n            <h1>pH</h1>\r\n            \r\n            <p>{data.ph}</p>\r\n          </div>\r\n          <div className=\"f2\">\r\n            <h1>Fat </h1>\r\n            <p>{data.fat} mg</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"section2\">\r\n          <div className=\"f3\">\r\n            <h1>SNF</h1>\r\n            <p>{data.snf} %</p>\r\n          </div>\r\n          <div className=\"f4\">\r\n            <h1>MBRT</h1>\r\n            <p>{data.mbrt} mins</p>\r\n          </div>\r\n        </div>\r\n        \r\n      </div>\r\n}\r\n    </div>\r\n  );\r\n}\r\n","D:\\work\\delivery-react-app\\src\\trace\\Main.js",[],"D:\\work\\delivery-react-app\\src\\trace\\getDate.js",["189","190"],"D:\\work\\delivery-react-app\\src\\components\\PackOrders.js",["191"],"import React, { Component, Fragment } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Loading from './Loading';\r\nimport { Avatar, Typography } from \"@material-ui/core\";\r\nimport {max} from '../helpers/math';\r\n\r\nimport LeftRightSwitch from './LeftRightSwitch';\r\nimport PackOrderForm from './PackOrderForm';\r\n\r\nfunction mapStateToProps(state) {\r\n  let {setAdmin} = state;\r\n  return {\r\n    ...setAdmin\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n\r\n  };\r\n}\r\n\r\nfunction CustomerDetails(props) {\r\n  const {customer} = props;\r\n  if(!customer) {\r\n    return \"No Customer Found\";\r\n  }\r\n  const {name, phone, address, order_id} = customer;\r\n  return (\r\n    <div>\r\n      <Typography variant=\"h5\">\r\n        {order_id} - {name}\r\n      </Typography>\r\n      <Typography>\r\n        {phone}\r\n      </Typography>\r\n      <Typography>\r\n        {address.house_number}, {address.subarea}, {address.area}, {address.hub}\r\n      </Typography>\r\n    </div>\r\n  )\r\n}\r\n\r\nclass PackOrders extends Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      crate_id: 1\r\n    }\r\n  }\r\n  gotoPreviousCrate = () => {\r\n    let {crate_id} = this.state;\r\n    if(max(1, crate_id - 1) === crate_id) return;\r\n\r\n    this.setState({\r\n      crate_id: max(1, crate_id - 1)\r\n    });\r\n  }\r\n  gotoNextCrate = () => {\r\n    let {crate_id} = this.state;\r\n    this.setState({\r\n      crate_id: crate_id + 1\r\n    });\r\n  }\r\n  render() {\r\n    let {loading, error, crate_id} = this.state;\r\n    const {customers} = this.props;\r\n    \r\n    console.log(\"Rendering\");\r\n\r\n    let order;\r\n    if(customers) {\r\n      for(const customer of customers) {\r\n        let data = customer[1]\r\n        if(data.crate_id === crate_id) {\r\n          order = data;\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(order)\r\n\r\n    if(!customers) {\r\n      return (\r\n        <div style={{padding: 10}}>\r\n          <Typography variant=\"h5\">Failed to fetch the data. Refresh the page</Typography>\r\n        </div>\r\n      )\r\n    }\r\n    return (\r\n      <Fragment>\r\n        \r\n        <LeftRightSwitch\r\n          onLeft={this.gotoPreviousCrate}\r\n          onRight={this.gotoNextCrate}\r\n          disabledLeft={crate_id === 1}\r\n          center={\r\n            <Avatar style={{background: '#4646d2'}}>\r\n              {crate_id}\r\n            </Avatar>\r\n          }\r\n        />\r\n\r\n        <Divider />\r\n        {\r\n          loading ?\r\n          <div>\r\n            <Loading />\r\n          </div> :\r\n          <div style={{padding: 10}}>\r\n            {\r\n              order ? \r\n                <CustomerDetails customer={order} />\r\n              : \r\n              <div>\r\n                <Typography variant=\"h5\">No such crate number found</Typography>\r\n              </div>\r\n            }\r\n          </div>\r\n        }\r\n        <Divider />\r\n        {\r\n          loading ?\r\n          <div>\r\n            <Loading />\r\n          </div> :\r\n          <div style={{padding: 10}}>\r\n            {\r\n              order ? \r\n                <PackOrderForm order={order} loading={loading} />\r\n              : \r\n              <div>\r\n                <Typography variant=\"h5\">No such crate number found</Typography>\r\n              </div>\r\n            }\r\n          </div>\r\n        }\r\n        \r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(PackOrders);","D:\\work\\delivery-react-app\\src\\components\\PackOrderForm.js",[],"D:\\work\\delivery-react-app\\src\\components\\LeftRightSwitch.js",[],"D:\\work\\delivery-react-app\\src\\helpers\\math.js",[],{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","replacedBy":"195"},{"ruleId":"196","severity":1,"message":"197","line":38,"column":5,"nodeType":"198","messageId":"199","endLine":274,"endColumn":9},{"ruleId":"200","severity":1,"message":"201","line":38,"column":11,"nodeType":"202","messageId":"203","endLine":38,"endColumn":29},{"ruleId":"200","severity":1,"message":"204","line":112,"column":37,"nodeType":"202","messageId":"203","endLine":112,"endColumn":52},{"ruleId":"200","severity":1,"message":"205","line":37,"column":82,"nodeType":"202","messageId":"203","endLine":37,"endColumn":101},{"ruleId":"192","replacedBy":"206"},{"ruleId":"194","replacedBy":"207"},{"ruleId":"200","severity":1,"message":"208","line":1,"column":15,"nodeType":"202","messageId":"203","endLine":1,"endColumn":25},{"ruleId":"200","severity":1,"message":"209","line":4,"column":9,"nodeType":"202","messageId":"203","endLine":4,"endColumn":17},{"ruleId":"200","severity":1,"message":"210","line":4,"column":19,"nodeType":"202","messageId":"203","endLine":4,"endColumn":25},{"ruleId":"200","severity":1,"message":"211","line":6,"column":8,"nodeType":"202","messageId":"203","endLine":6,"endColumn":14},{"ruleId":"200","severity":1,"message":"212","line":1,"column":19,"nodeType":"202","messageId":"203","endLine":1,"endColumn":28},{"ruleId":"200","severity":1,"message":"213","line":1,"column":17,"nodeType":"202","messageId":"203","endLine":1,"endColumn":25},{"ruleId":"200","severity":1,"message":"214","line":2,"column":22,"nodeType":"202","messageId":"203","endLine":2,"endColumn":29},{"ruleId":"200","severity":1,"message":"215","line":67,"column":19,"nodeType":"202","messageId":"203","endLine":67,"endColumn":24},"no-native-reassign",["216"],"no-negated-in-lhs",["217"],"no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","no-unused-vars","'productsCollection' is assigned a value but never used.","Identifier","unusedVar","'selectedSubarea' is assigned a value but never used.","'order_cancel_reason' is assigned a value but never used.",["216"],["217"],"'Typography' is defined but never used.","'location' is defined but never used.","'search' is defined but never used.","'moment' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'subDays' is defined but never used.","'error' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]